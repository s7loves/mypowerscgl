<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZGDBasic</name>
    </assembly>
    <members>
        <member name="T:ZGD.ObjectManagement.Managers.SamePriorityObjectManager`1">
            <summary>
            SamePriorityObjectManager 同一优先级对象管理器的参考实现。
            </summary>    
        </member>
        <member name="T:ZGD.ObjectManagement.Managers.ISamePriorityObjectManager`1">
            <summary>
            ISamePriorityObjectManager 同一优先级对象管理器，用于管理同一优先级的所有对象，这些对象将按照先来后到的顺序确定其优先顺序（“第二优先级”）。
            该接口的实现必须保证是线程安全的。
            rabbit 2007.04.16 /2008.08.13修订
            </summary>
            <typeparam name="T">要被管理的对象的类型</typeparam>
        </member>
        <member name="M:ZGD.ObjectManagement.Managers.ISamePriorityObjectManager`1.AddWaiter(`0)">
            <summary>
            AddWaiter 添加一个等待者。如果等待者在管理器中已经存在，则直接返回。
            </summary>       
        </member>
        <member name="M:ZGD.ObjectManagement.Managers.ISamePriorityObjectManager`1.GetNextWaiter">
            <summary>
            GetNextWaiter 返回等待时间最长的waiter。
            注意，返回时并不会从等待列表中删除waiter。如果要删除某个等待者，请调用RemoveWaiter。
            </summary>       
        </member>
        <member name="M:ZGD.ObjectManagement.Managers.ISamePriorityObjectManager`1.GetWaitersByPriority">
            <summary>
            GetWaitersByPriority 按照等待者加入的先后顺序返回等待者数组，数组中index越小的等待者其等待时间越长，其优先级也越高。
            </summary>       
        </member>
        <member name="M:ZGD.ObjectManagement.Managers.ISamePriorityObjectManager`1.RemoveWaiter(`0)">
            <summary>
            RemoveWaiter 从管理器中移除指定的等待者。
            </summary>        
        </member>
        <member name="M:ZGD.ObjectManagement.Managers.ISamePriorityObjectManager`1.Clear">
            <summary>
            Clear 清空管理器中的所有等待者。
            </summary>
        </member>
        <member name="M:ZGD.ObjectManagement.Managers.ISamePriorityObjectManager`1.Contains(`0)">
            <summary>
            Contains 管理器中是否存在指定的等待者。
            </summary>       
        </member>
        <member name="P:ZGD.ObjectManagement.Managers.ISamePriorityObjectManager`1.Count">
            <summary>
            Count 当前管理器中等待者的数量。
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Integration.ICombined`2">
            <summary>
            ICombined 可以被合并的对象必须实现的接口。
            rabbit 2009.05.23
            </summary>
            <typeparam name="TID">被合并对象的标志类型</typeparam>
            <typeparam name="TCombinedObj">被合并对象的类型</typeparam>   
        </member>
        <member name="T:ZGD.ObjectManagement.Integration.Combiner">
            <summary>
            Combiner 对象合并器。
            </summary>
        </member>
        <member name="M:ZGD.ObjectManagement.Integration.Combiner.CombineOnSameID``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{``1}})">
            <summary>
            CombineOnSameID 将多个list中的对象依据ID合并起来。
            </summary>
            <typeparam name="TID">被合并对象的标志类型</typeparam>
            <typeparam name="TObj">被合并对象的类型</typeparam>        
        </member>
        <member name="M:ZGD.ObjectManagement.Integration.Combiner.CombineIntoContainer``2(System.Collections.Generic.IDictionary{``0,``1}@,System.Collections.Generic.IEnumerable{``1}[])">
            <summary>
            IDictionary 将多个collection中的对象依据ID合并到container中去。
            </summary>
            <typeparam name="TID">被合并对象的标志类型</typeparam>
            <typeparam name="TObj">被合并对象的类型</typeparam> 
        </member>
        <member name="T:ZGD.ObjectManagement.Increasing.Management.IRoundIncreasingCache`3">
            <summary>
            IRoundIncreasingCache 用于存储当前Round数据的增量缓存
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Cache.IHiberarchyCache`1">
            <summary>
            IHiberarchyCache 增强的、寻址快速的层级结构缓存。该接口的实现必须是线程安全的。
            内部的Tree和Dictionary的数据始终是同步的。
            </summary>   
        </member>
        <member name="M:ZGD.ObjectManagement.Cache.IHiberarchyCache`1.Get(System.String)">
            <summary>
            Get 如果目标对象在缓存中不存在，则通过ObjectRetriever去提取。
            </summary>           
        </member>
        <member name="M:ZGD.ObjectManagement.Cache.IHiberarchyCache`1.HaveContained(System.String)">
            <summary>
            HaveContained 缓存中是否一经包含了目标对象。
            </summary>       
        </member>
        <member name="M:ZGD.ObjectManagement.Cache.IHiberarchyCache`1.GetAllKeyListCopy">
            <summary>
            GetAllKeyListCopy 获取所有ID的列表的拷贝。
            </summary>         
        </member>
        <member name="M:ZGD.ObjectManagement.Cache.IHiberarchyCache`1.GetAllValListCopy">
            <summary>
            GetAllValListCopy 获取所有的节点值列表的拷贝。
            </summary>       
        </member>
        <member name="M:ZGD.ObjectManagement.Cache.IHiberarchyCache`1.GetChildrenOf(System.String)">
            <summary>
            GetChildrenOf 获取parentID的所有孩子节点的节点值列表。
            </summary>     
        </member>
        <member name="M:ZGD.ObjectManagement.Cache.IHiberarchyCache`1.GetChildrenCount(System.String)">
            <summary>
            GetChildrenCount 获取parentID直接下级的个数。
            </summary>        
        </member>
        <member name="M:ZGD.ObjectManagement.Cache.IHiberarchyCache`1.CreateHiberarchyTree">
            <summary>
            CreateHiberarchyTree 返回表示层级信息的最单纯的数据结构。
            注意：返回的Tree实际上与内部的AgileMultiTree是引用的根节点是同一个节点。
            </summary>        
        </member>
        <member name="M:ZGD.ObjectManagement.Cache.IHiberarchyCache`1.GetNodesOnDepthIndex(System.Int32)">
            <summary>
            GetNodesOnDepthIndex 获取某一深度的所有节点。Root的深度索引为0
            </summary> 
        </member>
        <member name="M:ZGD.ObjectManagement.Cache.IHiberarchyCache`1.GetNodesOnDepthIndex(System.String,System.Int32)">
            <summary>
            GetNodesOnDepthIndex 获取所属parentID体系下并且深度为depthIndex的所有节点。Root的深度索引为0
            </summary>        
        </member>
        <member name="P:ZGD.ObjectManagement.Cache.IHiberarchyCache`1.RootID">
            <summary>
            RootID 设置根节点的ID。
            </summary>
        </member>
        <member name="P:ZGD.ObjectManagement.Cache.IHiberarchyCache`1.SequenceCodeSplitter">
            <summary>
            SequenceCodeSplitter 节点路径（序列号）的分割符。
            </summary>
        </member>
        <member name="T:ZGD.Logger.FileAgileLogger">
            <summary>
            FileAgileLogger 将日志记录到文本文件。线程安全。
            </summary>
        </member>
        <member name="T:ZGD.Logger.IAgileLogger">
            <summary>
            IAgileLogger 用于记录日志信息。log方法不会抛出异常！
            通常可以通过ESFramework.Common.AdvancedFunction.SetProperty 方法来简化组件的日志记录器的装配。  
            rabbit
            </summary>
        </member>
        <member name="M:ZGD.Logger.IAgileLogger.LogSimple(System.Exception,System.String,ZGD.Logger.ErrorLevel)">
            <summary>
            LogSimple 不记录异常的堆栈位置
            </summary>       
        </member>
        <member name="T:ZGD.Arithmetic.Sorting.InsertionSorter`1">
            <summary>
            InsertionSorter 插入排序
            CQ，2008.12.13
            </summary>
        </member>
        <member name="T:ZGD.Arithmetic.Sorting.HeapSorter`1">
            <summary>
            HeapSorter 堆排序
            CQ，2008.12.13
            </summary>    
        </member>
        <member name="T:DataStructure.BinarySearcher`1">
            <summary>
            BinarySearcher 折半查找
            CQ，2008.12.13
            </summary>
            <typeparam name="TVal"></typeparam>
        </member>
        <member name="M:DataStructure.BinarySearcher`1.Search(System.Collections.Generic.IList{`0},`0)">
            <summary>
            Search 返回的是目标值所在的索引，如果不存在则返回-1
            </summary>        
        </member>
        <member name="T:ZGD.Emit.Application.DynamicProxyFactory">
            <summary>
            DynamicProxyFactory 用于创建各种类型动态代理的工厂。线程安全。
            rabbit 2008.03.01
            </summary>
        </member>
        <member name="M:ZGD.Emit.Application.DynamicProxyFactory.CreateEFProxy``1(System.Object,ZGD.Emit.DynamicProxy.IExceptionFilter)">
            <summary>
            CreateEFProxy 如果origin为透明代理，则原始的类型信息会丢失，该方法将抛出异常。该情况下请使用带强类型的origin参数的重载方法。        
            </summary>  
        </member>
        <member name="T:ZGD.Date">
            <summary>
            Date 表示年月日。
            </summary>
        </member>
        <member name="T:ZGD.Threading.Timers.CallbackTimer`1">
            <summary>
            CallbackTimer 回调任务定时器。
            注意：回调任务会异步在ThreadPool的WorkerThread上执行。即使目标任务抛出异常也不会影响INotifyTimer的继续运行。
            </summary>   
        </member>
        <member name="T:ZGD.Threading.Engines.BaseCycleEngine">
            <summary>
            BaseCycleEngine ICycleEngine的抽象实现，循环引擎直接继承它并实现DoDetect方法即可。
            rabbit 2006.12.21
            </summary>
        </member>
        <member name="T:ZGD.Threading.Engines.ICycleEngine">
            <summary>
            ICycleEngine 在后台线程中进行间隔循环的引擎
            rabbit 2006.12.21
            </summary>
        </member>
        <member name="M:ZGD.Threading.Engines.ICycleEngine.Start">
            <summary>
            Start 启动后台引擎线程
            </summary>
        </member>
        <member name="M:ZGD.Threading.Engines.ICycleEngine.Stop">
            <summary>
            Stop 停止后台引擎线程，只有当线程安全退出后，该方法才返回
            </summary>
        </member>
        <member name="P:ZGD.Threading.Engines.ICycleEngine.IsRunning">
            <summary>
            IsRunning 引擎是否运行中
            </summary>
        </member>
        <member name="P:ZGD.Threading.Engines.ICycleEngine.DetectSpanInSecs">
            <summary>
            DetectSpanInSecs 引擎进行轮询的间隔，DetectSpanInSecs=0，表示无间隙运作引擎；DetectSpanInSecs小于0则表示不使用引擎
            </summary>
        </member>
        <member name="E:ZGD.Threading.Engines.ICycleEngine.OnEngineStopped">
            <summary>
            OnEngineStopped 当引擎由运行变为停止状态时，将触发此事件。如果是异常停止，则事件参数为异常对象，否则，事件参数为null。
            </summary>
        </member>
        <member name="M:ZGD.Threading.Engines.BaseCycleEngine.DoDetect">
            <summary>
            DoDetect 每次循环时，引擎需要执行的核心动作。
            (1)该方法不允许抛出异常。
            (2)该方法中不允许调用BaseCycleEngine.Stop()方法，否则会导致死锁。
            </summary>
            <returns>返回值如果为false，表示退出引擎循环线程</returns>
        </member>
        <member name="T:ZGD.Threading.Timers.ICallbackTimer`1">
            <summary>
            ICallbackTimer 回调定时器。
            注意：回调任务会异步在ThreadPool的WorkerThread上执行。即使目标任务抛出异常也不会影响INotifyTimer的继续运行。
            </summary>    
        </member>
        <member name="M:ZGD.Threading.Timers.ICallbackTimer`1.AddCallback(System.Int32,ZGD.CbGeneric{`0},`0)">
            <summary>
            AddCallback 添加一个回调任务。目标任务会在spanInSecs后运行。仅仅运行一次。
            </summary>
            <param name="spanInSecs">多少秒后执行任务</param>
            <param name="_callback">目标方法的委托</param>
            <param name="_callbackPara">调用目标方法的参数</param>
            <returns>新的任务编号</returns>     
        </member>
        <member name="M:ZGD.Threading.Timers.ICallbackTimer`1.RemoveCallback(System.Int32)">
            <summary>
            RemoveCallback 删除目标回调任务。
            </summary>        
        </member>
        <member name="M:ZGD.Threading.Timers.ICallbackTimer`1.RemoveCallbackAndAddNew(System.Int32,System.Int32,ZGD.CbGeneric{`0},`0)">
            <summary>
            RemoveCallbackAndAddNew 删除目标回调任务，并添加一个新的回调任务。
            </summary>
        </member>
        <member name="M:ZGD.Threading.Timers.ICallbackTimer`1.GetLeftSeconds(System.Int32)">
            <summary>
            GetLeftSeconds 离目标任务被回调执行还有多长时间（s）。返回0，表示任务不存在或者任务已经被执行。
            </summary>       
        </member>
        <member name="M:ZGD.Threading.Timers.ICallbackTimer`1.Clear">
            <summary>
            Clear 清除所有回调任务。
            </summary>
        </member>
        <member name="T:ZGD.Threading.Engines.IEngineTacheUtil">
            <summary>
            IEngineTacheUtil 各个IEngineTache通过IEngineTacheUtil共享数据
            上游引擎环可以向其中存放数据，下游引擎环从中取用数据
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Managers.IPriorityObject">
            <summary>
            IPriorityObject 具有优先级的对象的接口。
            </summary>
        </member>
        <member name="T:ZGD.Collections.SortedArray`2">
            <summary>
            SortedArray 有序的数组，其中Key是不允许重复的。如果添加重复的key，则将抛出异常。如果是批添加出现重复，则批添加将全部失败。   
            </summary>
        </member>
        <member name="M:ZGD.Collections.SortedArray`2.RemoveByKey(`0)">
            <summary>
            Remove 删除数组中所有值为t的元素。
            </summary>      
        </member>
        <member name="M:ZGD.Collections.SortedArray`2.GetByKeyScope(`0,`0,`0[]@,`1[]@)">
            <summary>
            GetByKeyScope 获取[minKey,maxKey]闭集范围内的键和值的有序数组。
            </summary>       
        </member>
        <member name="M:ZGD.Collections.SortedArray`2.GetByKeyScope(`0,`0)">
            <summary>
            GetByKeyScope 获取[minKey,maxKey]闭集范围内的值的有序数组。
            </summary>
        </member>
        <member name="M:ZGD.Collections.SortedArray`2.Shrink">
            <summary>
            Shrink 将内部数组收缩到最小，释放内存。
            </summary>
        </member>
        <member name="T:ZGD.Threading.Engines.ISequentialEngine">
            <summary>
            ISequentialEngine 用于将各个IEngineTache组装起来形成一个引擎，并顺序执行。同时传递各个环的事件信息
            </summary>
        </member>
        <member name="M:ZGD.Threading.Engines.ISequentialEngine.Initialize(System.Collections.Generic.IList{ZGD.Threading.Engines.IEngineTache},System.Boolean)">
            <summary>
            Initialize 初始化引擎。将调用每个引擎环的Initialize方法。
            </summary>
        </member>
        <member name="M:ZGD.Threading.Engines.ISequentialEngine.Excute">
            <summary>
            Excute 启动引擎
            </summary>
        </member>
        <member name="M:ZGD.Threading.Engines.ISequentialEngine.Pause">
            <summary>
            Pause 暂停引擎
            </summary>
        </member>
        <member name="M:ZGD.Threading.Engines.ISequentialEngine.Continue">
            <summary>
            Continue 继续运行引擎
            </summary>
        </member>
        <member name="M:ZGD.Threading.Engines.ISequentialEngine.Stop">
            <summary>
            Stop 停止引擎
            </summary>
        </member>
        <member name="P:ZGD.Threading.Engines.ISequentialEngine.Running">
            <summary>
            Running 引擎是否正在运行
            </summary>
        </member>
        <member name="E:ZGD.Threading.Engines.ISequentialEngine.PartProgressPublished">
            <summary>
            PartProgressPublished 单个IEngineTache的执行进度变化
            </summary>
        </member>
        <member name="E:ZGD.Threading.Engines.ISequentialEngine.TitleChanged">
            <summary>
            TitleChanged 当紧接的下游引擎环被调用时，将发布该引擎环的Title
            </summary>
        </member>
        <member name="E:ZGD.Threading.Engines.ISequentialEngine.EngineDisruptted">
            <summary>
            EngineDisruptted 引擎任务被中断，事件参数说明中断原因
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Trees.Binary.IBinaryTreeDrawer`1">
            <summary>
            IBinaryDrawer 用于在设备上绘制二叉树。
            作者：Rabbit 
            2008.05.11
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.UniqueObjectList`1">
            <summary>
            UniqueObjectList 保证list中的每个object都是唯一的，不会重复。该接口的实现保证是线程安全的。
            </summary>   
        </member>
        <member name="T:ZGD.Helpers.XmlHelper">
            <summary>
            XmlHelper 用于简化XML文件和XmlNode的操作，仅仅支持两级节点。可能配合使用的ZGD.Persistence命名空间下的类。
            rabbit 2006.06
            </summary>
        </member>
        <member name="M:ZGD.Helpers.XmlHelper.FillObjectNode(System.Xml.XmlNode,System.Object)">
            <summary>
            FillObjectNode 使用obj各个属性的名字和值为objNode添加子节点
            </summary>        
        </member>
        <member name="M:ZGD.Helpers.XmlHelper.ConfigObject(System.Xml.XmlNode,System.Object)">
            <summary>
            ConfigObject 使用XmlNode的Attributes信息和Child Node信息来设置target的同名属性
            </summary>       
        </member>
        <member name="M:ZGD.Helpers.XmlHelper.GetChildNode(System.Xml.XmlNode,System.String)">
            <summary>
            GetChildNode 获取满足指定名称的第一个Child Node
            </summary> 
        </member>
        <member name="M:ZGD.Helpers.XmlHelper.GetChildNodes(System.Xml.XmlNode,System.String)">
            <summary>
            GetChildNodes 获取指定名称的Child Node的列表
            </summary>       
        </member>
        <member name="M:ZGD.Helpers.XmlHelper.ParseXmlNodeString(System.String)">
            <summary>
            ParseXmlNodeString 将OutXml字符串解析为XmlNode
            </summary>       
        </member>
        <member name="M:ZGD.Helpers.XmlHelper.GetXmlNodeString(System.Xml.XmlNode)">
            <summary>
            GetXmlNodeString 获取Node的OuterXml字符串
            </summary>       
        </member>
        <member name="T:ZGD.Network.Tcp.ISafeNetworkStream">
            <summary>
            INetworkStreamSafe 线程安全的网络流 。保证任一时刻最多只有一个读/写动作发生。
            NetworkStream 自己就能保证同步！ ？
            作者：Rabbit 
            2008.04.22
            </summary>	
        </member>
        <member name="T:ZGD.MapItem">
            <summary>
            MapItem 映射项。
            </summary>
        </member>
        <member name="T:ZGD.Emit.DynamicProxy.IMethodTimeLogger">
            <summary>
            IMethodTimeLogger 该接口用于记录MethodTimeInterceptor捕捉到的方法的执行时间。
            rabbit 2008.06.13
            </summary>
        </member>
        <member name="T:ZGD.Widget.EnumComboBox">
            <summary>
            EnumComboBox 用于将Enum绑定到ComboBox
            </summary>
        </member>
        <member name="F:ZGD.Widget.EnumComboBox.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:ZGD.Widget.EnumComboBox.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:ZGD.Widget.EnumComboBox.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:ZGD.Widget.EnumComboBox.DataSource">
            <summary>
            DataSource 数据源必须是一个Enum类型
            </summary>
        </member>
        <member name="P:ZGD.Widget.EnumComboBox.SelectedValue">
            <summary>
            SelectedValue 获取或设置选中的Enum枚举值
            </summary>
        </member>
        <member name="T:ZGD.Threading.Engines.AgileCycleEngine">
            <summary>
            AgileCycleEngine 通过组合使用的循环引擎
            </summary>
        </member>
        <member name="M:ZGD.Threading.Engines.IEngineActor.EngineAction">
            <summary>
            EngineAction 执行引擎动作，返回false表示停止引擎。
            注意，该方法不能抛出异常，否则会导致引擎停止运行（循环线程遭遇异常退出）。
            </summary>       
        </member>
        <member name="T:ZGD.Threading.Application.ICircleTaskSwitcher`1">
            <summary>
            ICircleTaskSwitcher 循环任务切换器。
            将一天24小时分为多个时段，在不同的时段，会有不同的任务。当到达任务切换点时，切换器会触发切换事件。
            rabbit 2008.12.29
            </summary>
        </member>
        <member name="P:ZGD.Threading.Application.ICircleTaskSwitcher`1.TaskDictionary">
            <summary>
            TaskDictionary key为任务的起始点(hour)，value为对应的任务。
            </summary>
        </member>
        <member name="E:ZGD.Threading.Application.ICircleTaskSwitcher`1.TaskSwitched">
            <summary>
            TaskSwitched 当任务发生切换时，触发此事件，事件参数为刚得到控制权的任务。
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Trees.Multiple.IMTreeVal">
            <summary>
            IMTreeVal 如果一个对象需要包含于多叉树的节点中，则该对象必须实现IMTreeVal接口。
            rabbit 2008.07.28
            </summary>	
        </member>
        <member name="P:ZGD.ObjectManagement.Trees.Multiple.IMTreeVal.DepthIndex">
            <summary>
            DepthIndex 当前节点在多叉树中的深度索引。Root的深度索引为0。
            若不想使用深度索引，请返回-1或负数。
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Trees.Binary.IHeap`1">
            <summary>
            IHeap 最大、最小堆。CQ，2008.11.26
            </summary>   
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Binary.IHeap`1.Pop">
            <summary>
            Pop 弹出根节点的值，并删除根节点。如果树为空，则
            </summary>      
        </member>
        <member name="F:ZGD.ObjectManagement.Trees.Binary.HeapType.Max">
            <summary>
            最大堆
            </summary>
        </member>
        <member name="F:ZGD.ObjectManagement.Trees.Binary.HeapType.Min">
            <summary>
            最小堆
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Trees.Binary.DoulbeEndedHeap`1">
            <summary>
            DoulbeEndedHeap 双端堆，跟结点为空，左子树为最小堆，右子树为最大堆
            </summary>
            <typeparam name="TVal"></typeparam>
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Binary.CompleteBinaryTree`1.Remove(`0)">
            <summary>
            把最后一个结点值赋给要删除的结点，然后删除最后一个结点
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Binary.CompleteBinaryTree`1.GetFatherIndx(System.Int32)">
            <summary>
            获取某结点的父结点在list中的index
            </summary>        
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Binary.CompleteBinaryTree`1.IsInRightTree(System.Int32)">
            <summary>
            判断某结点是否在右子树中
            </summary>
            <param name="nodeIndx">判断的结点index，必须大于0</param>        
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Binary.CompleteBinaryTree`1.GetOppositeNodeIndx(System.Int32,System.Boolean)">
            <summary>
            获取某结点的对称结点的索引
            </summary>
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Binary.CompleteBinaryTree`1.GetLayerOfNode(System.Int32)">
            <summary>
            根据索引得到该结点所在的层，根结点为第一层。
            </summary>
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Binary.CompleteBinaryTree`1.GetIndxOfNode(`0)">
            <summary>
            根据结点的值，获取该结点的索引，如果没有找到，返回-1
            </summary>        
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Binary.CompleteBinaryTree`1.RemoveLastNode">
            <summary>
            删除最后一个结点
            </summary>
        </member>
        <member name="P:ZGD.ObjectManagement.Trees.Binary.CompleteBinaryTree`1.SmartRWLocker">
            <summary>
            SmartRWLocker 为支持反序列化后_smartRWLocker不为null而设计。
            </summary>
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Binary.DoulbeEndedHeap`1.Insert(`0)">
            <summary>
            把新的结点插入到完全二叉树的最后一个结点，如果该结点在最大堆，判断最小堆所对应的结点值是否比该结点的值大，如果是，则交换数据，重新调整左右子树。
            如果不是，则调整右子树。
            如果该结点在左子树，判断最大堆对应的结点值是否比该值小，如果是，则交换数据，重新调整左右子树。如果不是，则调整左子树。
            </summary>        
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Binary.DoulbeEndedHeap`1.RemoveMin">
            <summary>
            删除最小值，最小值为最小堆的根结点        
            </summary>        
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Binary.DoulbeEndedHeap`1.RemoveMax">
            <summary>
            删除最大值，最大值为最大堆的根结点
            </summary>        
        </member>
        <member name="T:ZGD.ObjectManagement.Managers.IGroupingObjectManager`3">
            <summary>
            IGroupingObjectManager 高效地管理需要分组的对象。该接口的实现保证是线程安全的。
            </summary>   
        </member>
        <member name="M:ZGD.ObjectManagement.Managers.IGroupingObjectManager`3.Add(`2)">
            <summary>
            Add 如果已经存在同ID的对象，则用新对象替换旧对象。
            </summary>        
        </member>
        <member name="M:ZGD.ObjectManagement.Managers.IGroupingObjectManager`3.Clear">
            <summary>
            Clear 清除所有对象与分组。
            </summary>
        </member>
        <member name="M:ZGD.ObjectManagement.Managers.IGroupingObjectManager`3.GetCountOfGroup(`0)">
            <summary>
            GetCountOfGroup 获取某个分组中的对象的个数。
            </summary>        
        </member>
        <member name="M:ZGD.ObjectManagement.Managers.IGroupingObjectManager`3.GetAllObjectsCopy">
            <summary>
            GetAllObjectsCopy 获取管理器中的所有对象列表。
            </summary>        
        </member>
        <member name="M:ZGD.ObjectManagement.Managers.IGroupingObjectManager`3.GetGroupsCopy">
            <summary>
            GetGroupsCopy 获取所有的分组标志列表。
            </summary>       
        </member>
        <member name="M:ZGD.ObjectManagement.Managers.IGroupingObjectManager`3.GetObjectsCopy(`0)">
            <summary>
            GetObjectsCopy 获取某个分组中的所有对象的列表。
            </summary>        
        </member>
        <member name="T:ZGD.ObjectManagement.Managers.IGroupingObject`2">
            <summary>
            IGroupingObject 能够被分组管理的对象必须实现的接口。
            </summary>   
        </member>
        <member name="T:ZGD.ObjectManagement.Cache.IBidirectionalMapping`2">
            <summary>
            IBidirectionalMapping 双向映射。即Key和Value都是唯一的，在这种情况下使用IBidirectionalMapping可提升依据Value查找Key的速度。
            该接口的实现必须是线程安全的。2008.08.20
            </summary>    
        </member>
        <member name="M:ZGD.ObjectManagement.Cache.IBidirectionalMapping`2.Add(`0,`1)">
            <summary>
            Add 添加映射对。如果已经有相同的key/value存在，则会覆盖。
            </summary>       
        </member>
        <member name="M:ZGD.ObjectManagement.Cache.IBidirectionalMapping`2.GetAllT1ListCopy">
            <summary>
            GetAllT1ListCopy 返回T1类型元素列表的拷贝。
            </summary>       
        </member>
        <member name="M:ZGD.ObjectManagement.Cache.IBidirectionalMapping`2.GetAllT2ListCopy">
            <summary>
            GetAllT2ListCopy 返回T2类型元素列表的拷贝。
            </summary>    
        </member>
        <member name="T:ZGD.Logger.ILogger">
            <summary>
            ILogger 用于日志记录的基础接口，线程安全的
            </summary>
        </member>
        <member name="T:ZGD.ShortTimeScope">
            <summary>
            ShortTimeScope 时间范围。
            rabbit 2007.01.08
            </summary>
        </member>
        <member name="M:ZGD.ShortTimeScope.Contains(ZGD.ShortTime)">
            <summary>
            Contains 目标时刻是否在时间范围内
            </summary>       
        </member>
        <member name="T:ZGD.Arithmetic.AStar.ICostGetter">
            <summary>
            ICostGetter 获取从当前节点向某个方向移动时的代价。
            </summary>
        </member>
        <member name="T:ZGD.Arithmetic.AStar.SimpleCostGetter">
            <summary>
            SimpleCostGetter ICostGetter接口的简化实现。直线代价为10， 斜线为14。
            </summary>
        </member>
        <member name="T:ZGD.Threading.Engines.BriefWorkerEngine`1">
            <summary>
            BriefWorkerEngine 精简的工作者引擎。它使用多线程处理一批任务，这批任务处理结束后，工作者线程会被自动释放，而该引擎实例也就可以被结束了。
            与WorkerEngine的区别在于，WorkerEngine是在系统运行期间一直处于工作状态的。
            </summary>    
        </member>
        <member name="T:ZGD.Threading.Engines.BaseEngineTache">
            <summary>
            BaseEngineTache 引擎环的抽象基类，具体的引擎环从BaseEngineTache继承并覆写Abstract方法即可
            </summary>
        </member>
        <member name="T:ZGD.Threading.Engines.IEngineTache">
            <summary>
            IEngineTache 用于表示引擎中可拆卸的一部分
            </summary>
        </member>
        <member name="P:ZGD.Threading.Engines.IEngineTache.IsActive">
            <summary>
            IsActive 表示该引擎环是否正在运行中    
            </summary>
        </member>
        <member name="M:ZGD.Security.SecurityHelper.MD5String(System.String)">
            <summary>
            MD5Password 对字符串进行MD5摘要计算。
            </summary>      
        </member>
        <member name="T:ZGD.ObjectManagement.Trees.Multiple.IAgileMultiTree`1">
            <summary>
            IAgileMultiTree 用于缓存（多叉）树状的组织结构。该接口的实现必须是线程安全的。
            最主要的作用是，可以通过提取器将新添加的组织节点从其它地方加载到缓存树中。
            前提是，组织结构中的每一节点都有自己的SequenceCode来表达其在组织中个位置。
            </summary>    
        </member>
        <member name="T:ZGD.ObjectManagement.Trees.Multiple.IMultiTree`1">
            <summary>
            IMultiTree 多叉树基础接口。该接口的实现必须是线程安全的。
            rabbit 2008.07.28
            </summary>
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Multiple.IMultiTree`1.Initialize(ZGD.ObjectManagement.Trees.Multiple.MNode{`0})">
            <summary>
            Initialize 使用已经存在的某个树（或子树）来构造一个新树。
            </summary>      
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Multiple.IMultiTree`1.Initialize(`0,System.Collections.Generic.IList{`0})">
            <summary>
            Initialize 通过各个节点的内部值，重新构造多叉树的层级关系。
            </summary>
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Multiple.IMultiTree`1.GetNodesOnDepthIndex(System.Int32)">
            <summary>
            GetNodesOnDepthIndex 获取某一深度的所有节点。Root的深度索引为0
            </summary>        
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Multiple.IMultiTree`1.GetNodesOnDepthIndex(System.String,System.Char,System.Int32)">
            <summary>
            GetNodesOnDepthIndex 获取所属idPath体系下并且深度为depthIndex的所有节点。Root的深度索引为0
            </summary>        
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Multiple.IMultiTree`1.GetNodeByPath(System.String,System.Char)">
            <summary>
            GetNodeByPath 根据节点的ID的路径快速搜索到对应的节点，如idPath--0.1.1.0.2.5。比GetNodeByID效率要高。
            </summary>        
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Multiple.IMultiTree`1.GetOffsprings(ZGD.ObjectManagement.Trees.Multiple.MNode{`0})">
            <summary>
            GetOffsprings 获取某个节点的所有子孙节点。
            </summary>       
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Multiple.IMultiTree`1.GetLeaves(System.String,System.Char)">
            <summary>
            GetLeaves 获取某个路径下的所有叶子节点。如果Path已经是叶子节点，则返回包含自己的列表。
            </summary>     
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Multiple.IMultiTree`1.ActionOnEachNode(ZGD.CbGeneric{ZGD.ObjectManagement.Trees.Multiple.MNode{`0}})">
            <summary>
            ActionOnEachNode 从root开始对每个节点进行一次action。
            </summary>       
        </member>
        <member name="P:ZGD.ObjectManagement.Trees.Multiple.IMultiTree`1.Root">
            <summary>
            Root 返回多叉树的根节点。
            </summary>
        </member>
        <member name="P:ZGD.ObjectManagement.Trees.Multiple.IMultiTree`1.Count">
            <summary>
            Count 多叉树的当前节点总数。
            </summary>
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Multiple.IAgileMultiTree`1.Initialize">
            <summary>
            Initialize 加载和初始化整个AgileTree。该方法用于取代基类的IMultiTree.Initialize方法。
            </summary>
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Multiple.IAgileMultiTree`1.EnsureNodeExist(System.String)">
            <summary>
            EnsureNodeExist 用于确保目标节点及其所有上级节点都存在树中，如果都存在，则直接返回目标节点。
            否则，通过IAgileMultiTreeHelper来加载所需要的所有上级节点和目标节点，然后返回目标节点。
            如果即使通过IAgileMultiTreeHelper也无法提取某个上级节点或目标节点，则返回null。
            </summary>       
        </member>
        <member name="T:ZGD.ObjectManagement.Managers.IObjectManager`2">
            <summary>
            IObjectManager 用于管理具有唯一标志的对象，该接口实现必须保证线程安全。
            rabbit 2008.05.31
            </summary>   
        </member>
        <member name="M:ZGD.ObjectManagement.Managers.IObjectManager`2.Add(`0,`1)">
            <summary>
            Add 如果已经存在同ID的对象，则用新对象替换旧对象。
            </summary>     
        </member>
        <member name="M:ZGD.ObjectManagement.Managers.IObjectManager`2.Get(`0)">
            <summary>
            Get 如果不存在，则返回default（TObject）。
            </summary>        
        </member>
        <member name="T:ZGD.ObjectManagement.Increasing.BasePhaseIncreaseAccesser`3">
            <summary>
            BasePhaseIncreaseAccesser 当一个Round是由N天构成时，可以借助BasePhaseIncreaseAccesser简化IPhaseIncreaseAccesser的实现。
            </summary>    
        </member>
        <member name="T:ZGD.ObjectManagement.Increasing.IPhaseIncreaseAccesser`4">
            <summary>
            IPhaseIncreaseAccesser 用于从各个源访问每一阶段的增量数据。
            </summary>   
        </member>
        <member name="M:ZGD.ObjectManagement.Increasing.IPhaseIncreaseAccesser`4.GetMaxKeyOfPreviousRound">
            <summary>
            GetMaxKeyOfPreviousRound 获取上一轮各个源中的数据的最大标志。
            </summary>       
        </member>
        <member name="M:ZGD.ObjectManagement.Increasing.IPhaseIncreaseAccesser`4.NextIsLastPhaseOfRound(`1@,System.Collections.Generic.IDictionary{`0,`2}@)">
            <summary>
            NextIsLastPhaseOfRound 下一增量是否为当前Round的最后一个Phase。如果是，则out出每个源的最后Phase的最大标志。
            </summary>               
        </member>
        <member name="M:ZGD.ObjectManagement.Increasing.IPhaseIncreaseAccesser`4.GetMaxKey(`0)">
            <summary>
            GetMaxKey 获取指定源中的最大标志。
            </summary> 
        </member>
        <member name="M:ZGD.ObjectManagement.Increasing.IPhaseIncreaseAccesser`4.Retrieve(`0,`2,`2)">
            <summary>
            Retrieve 获取某一阶段的增量。maxKeyOfPrePhase 《 本阶段增量 《=  maxKeyOfThisPhase
            </summary>   
        </member>
        <member name="M:ZGD.ObjectManagement.Increasing.BasePhaseIncreaseAccesser`3.Initialize">
            <summary>
            Initialize 如果派生类override该方法，则在实现时必须先调用base.Initialize()方法。
            </summary>
        </member>
        <member name="M:ZGD.ObjectManagement.Increasing.BasePhaseIncreaseAccesser`3.GetMaxKeyBefore(System.DateTime)">
            <summary>
            GetMaxKeyBefore 获取endTime之前的最大的Key。注意TimeColumn要小于endTime，不能等于。
            </summary>      
        </member>
        <member name="P:ZGD.ObjectManagement.Increasing.BasePhaseIncreaseAccesser`3.TodayIsFirstDay">
            <summary>
            TodayIsFirstDay 是将启动时刻作为当前Round的第一天还是最后一天？
            </summary>
        </member>
        <!-- 对于成员“T:ZGD.Persistence.SpringFox”忽略有格式错误的 XML 注释 -->
        <member name="M:ZGD.Persistence.SpringFox.XmlObject(System.Object)">
            <summary>
            XmlObject 将object序列化为xml字符串
            </summary>   
        </member>
        <member name="M:ZGD.Persistence.SpringFox.DoXmlObject(System.Object,System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>
            DoXmlObject 根据obj的各个属性创建对应的Node作为curNode的子节点
            </summary>      
        </member>
        <member name="M:ZGD.Persistence.SpringFox.ObjectXml(System.String)">
            <summary>
            ObjectXml 将xml字符串转换为object
            </summary>       
        </member>
        <member name="M:ZGD.Persistence.SpringFox.ConfigObject(System.Xml.XmlNode,System.Object@)">
            <summary>
            ConfigObject 使用objNode的各个子节点配置target的对应的属性
            </summary>        
        </member>
        <member name="T:ZGD.Persistence.NonXmlAttribute">
            <summary>
            NotXmlAttribute 如果某个Property标记为NotXmlAttribute，则将不会被序列化到xml中
            </summary>
        </member>
        <!-- 对于成员“T:ZGD.Persistence.ISimpleList”忽略有格式错误的 XML 注释 -->
        <member name="T:ZGD.DateScope">
            <summary>
            DateScope 日期范围
            rabbit 2007.03.15
            </summary>
        </member>
        <member name="M:ZGD.DateScope.Contains(ZGD.Date)">
            <summary>
            Contains 目标时刻是否在时间范围内
            </summary>       
        </member>
        <member name="T:ZGD.Emit.DynamicProxy.AopSimple.ExceptionInterceptor">
            <summary>
            ExceptionInterceptor 用于截获并记录异常详细信息。
            </summary>
        </member>
        <member name="T:ZGD.Emit.DynamicProxy.AopSimple.IAopInterceptor">
            <summary>
            IAOPInterceptor 对方法进行截获并加入预处理和后处理、Around处理。
            rabbit 2008.05.20
            </summary>
        </member>
        <member name="M:ZGD.Emit.DynamicProxy.AopSimple.IAopInterceptor.NewArounder">
            <summary>
            NewArounder 请注意返回值必不能为null。
            </summary>        
        </member>
        <member name="T:ZGD.Emit.DynamicProxy.AopSimple.IArounder">
            <summary>
            IArounder 用于对截获的目标方法进行Around处理
            </summary>
        </member>
        <member name="M:ZGD.Emit.DynamicProxy.AopSimple.IArounder.OnException(ZGD.Emit.DynamicProxy.AopSimple.InterceptedMethod,System.Exception)">
            <summary>
            OnException 目标方法抛出异常。
            </summary>       
        </member>
        <member name="T:ZGD.Addins.AddinManager">
            <summary>
            NetAddinManagement 用于管理所有的插件，是IAddinManagement的默认实现。
            作者：Rabbit 
            2008.12.15 修改
            </summary>
        </member>
        <member name="T:ZGD.Addins.IAddinManager">
            <summary>
            IAddinManagement 用于加载/卸载，管理各种插件。
            作者：Rabbit 
            </summary>
        </member>
        <member name="M:ZGD.Addins.IAddinManager.LoadDefault">
            <summary>
            LoadDefault 加载当前目录或子目录下的所有有效插件
            </summary>
        </member>
        <member name="M:ZGD.Addins.IAddinManager.LoadAllAddins(System.String,System.Boolean)">
            <summary>
            LoadAllAddins 加载指定目录下的所有插件
            </summary>      
        </member>
        <member name="M:ZGD.Addins.IAddinManager.LoadAddinAssembly(System.String)">
            <summary>
            LoadAddinAssembly 加载指定的插件
            </summary>        
        </member>
        <member name="M:ZGD.Addins.IAddinManager.Clear">
            <summary>
            Clear 清空所有已经加载的插件
            </summary>
        </member>
        <member name="M:ZGD.Addins.IAddinManager.DynRemoveAddin(System.Int32)">
            <summary>
            DynRemoveAddin 动态移除指定的插件
            </summary>       
        </member>
        <member name="M:ZGD.Addins.IAddinManager.EnableAddin(System.Int32)">
            <summary>
            EnableAddin 启用指定的插件
            </summary>       
        </member>
        <member name="M:ZGD.Addins.IAddinManager.DisableAddin(System.Int32)">
            <summary>
            EnableAddin 禁用指定的插件
            </summary> 
        </member>
        <member name="P:ZGD.Addins.IAddinManager.CopyToMemory">
            <summary>
            CopyToMemory 是否将插件拷贝到内存后加载
            </summary>
        </member>
        <member name="P:ZGD.Addins.IAddinManager.AddinList">
            <summary>
            AddinList 已加载的插件列表
            </summary>
        </member>
        <member name="T:ZGD.Threading.Application.HeartBeatChecker">
            <summary>
            HeartBeatChecker 心跳监测器。
            IHeartBeatChecker 参考实现。
            </summary>
        </member>
        <member name="T:ZGD.Threading.Application.IHeartBeatChecker">
            <summary>
            IHeartBeatChecker 心跳监测器
            </summary>
        </member>
        <member name="M:ZGD.Threading.Application.IHeartBeatChecker.Initialize">
            <summary>
            Initialize 初始化并启动心跳监测器。
            </summary>
        </member>
        <member name="M:ZGD.Threading.Application.IHeartBeatChecker.RegisterOrActivate(System.String)">
            <summary>
            RegisterOrActivate 注册一个新的客户端或激活它（收到心跳消息）。
            </summary>       
        </member>
        <member name="M:ZGD.Threading.Application.IHeartBeatChecker.Unregister(System.String)">
            <summary>
            Unregister 服务端主动取消对目标客户端的监测。
            </summary>        
        </member>
        <member name="M:ZGD.Threading.Application.IHeartBeatChecker.Clear">
            <summary>
            Clear 清空所有的监测。
            </summary>
        </member>
        <member name="P:ZGD.Threading.Application.IHeartBeatChecker.SurviveSpanInSecs">
            <summary>
            SurviveSpanInSecs 在没有心跳到来时，可以存活的最长时间。SurviveSpanInSecs小于等于0，表示存活时间为无限长，而不需要进行心跳检查
            </summary>
        </member>
        <member name="P:ZGD.Threading.Application.IHeartBeatChecker.DetectSpanInSecs">
            <summary>
            DetectSpanInSecs 隔多长时间进行一次状态检查。
            </summary>
        </member>
        <member name="E:ZGD.Threading.Application.IHeartBeatChecker.SomeOneTimeOuted">
            <summary>
            SomeOneTimeOuted  当在规定的时间内没有任何消息过来，那么将会触发该事件。
            注意：该事件的处理函数严禁抛出任何异常。
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Pool.IPooledObjectCreator`1">
            <summary>
            IPooledObjectCreator 池化对象创建者。用于创建被池缓存的对象。并能清除对象的状态。
            rabbit 2008.06.13
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Increasing.IIncreaseAutoRetriever`4">
            <summary>
            IIncreaseAutoRetriever 增量数据自动获取器。每隔一段时间就从各个来源（TSourceToken）获取一次增量（TObject），并触发事件将增量发布出去。
            (1)一个Round由多个连续的Phase构成。当获取某Round的最后一个Phase增量时，触发的事件中的isLastPhaseOfRound参数为true。
            (2)假设增量标志是逐渐递增的。
            rabbit 2009.02.24
            </summary>
            <typeparam name="TSourceToken">增量来源的标志</typeparam>
            <typeparam name="TKey">每个增量Object的标志</typeparam>
            <typeparam name="TObject">增量Object的类型</typeparam>
        </member>
        <member name="M:ZGD.ObjectManagement.Increasing.IIncreaseAutoRetriever`4.ManualRefresh">
            <summary>
            ManualRefresh 手动刷新获取增量。
            </summary>
        </member>
        <member name="P:ZGD.ObjectManagement.Increasing.IIncreaseAutoRetriever`4.AutoRetrieveSpanInSecs">
            <summary>
            AutoRetrieveSpanInSecs 设置多长时间为一增量阶段。
            </summary>
        </member>
        <member name="E:ZGD.ObjectManagement.Increasing.IIncreaseAutoRetriever`4.ExceptionOccurred">
            <summary>
            ExceptionOccurred 当提取增量数据出现异常或IncreasementRetrieved事件处理器抛出异常时，将触发此事件，并且引擎将停止运行。
            </summary>
        </member>
        <member name="M:ZGD.Helpers.TypeHelper.IsSimpleType(System.Type)">
            <summary>
            IsSimpleType 是否为简单类型：数值、字符、字符串、日期、布尔、枚举、Type
            </summary>      
        </member>
        <member name="M:ZGD.Helpers.TypeHelper.GetClassSimpleName(System.Type)">
            <summary>
            GetClassSimpleName 获取class的声明名称，如 Person
            </summary>      
        </member>
        <member name="M:ZGD.Helpers.TypeHelper.ChangeType(System.Type,System.Object)">
            <summary>
            ChangeType 对System.Convert.ChangeType进行了增强，支持(0,1)到bool的转换，字符串->枚举、int->枚举、字符串->Type
            </summary>       
        </member>
        <member name="M:ZGD.Helpers.TypeHelper.GetTypeRegularName(System.Type)">
            <summary>
            GetTypeRegularName 获取类型的完全名称，如"ZGD.Filters.SourceFilter,ZGD"
            </summary>      
        </member>
        <member name="M:ZGD.Helpers.TypeHelper.GetTypeByRegularName(System.String)">
            <summary>
            GetTypeByFullString 通过类型的完全名称获取类型，regularName如"ZGD.Filters.SourceFilter,ZGD"
            </summary>       
        </member>
        <member name="T:ZGD.Network.NetHelper">
            <summary>
            NetHelper 。
            </summary>
        </member>
        <member name="M:ZGD.Network.NetHelper.ReceiveData(System.Net.Sockets.NetworkStream,System.Int32)">
            <summary>
            ReceiveData 从网络读取指定长度的数据
            </summary>	
        </member>
        <member name="M:ZGD.Network.NetHelper.ReceiveData(System.Net.Sockets.NetworkStream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            ReceiveData 从网络读取指定长度的数据 ，存放在buff中offset处
            </summary>	
        </member>
        <member name="M:ZGD.Network.NetHelper.ReceiveData(ZGD.Network.Tcp.ISafeNetworkStream,System.Int32)">
            <summary>
            ReceiveData 从网络读取指定长度的数据
            </summary>	
        </member>
        <member name="M:ZGD.Network.NetHelper.ReceiveData(ZGD.Network.Tcp.ISafeNetworkStream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            ReceiveData 从网络读取指定长度的数据 ，存放在buff中offset处
            </summary>		
        </member>
        <member name="M:ZGD.Network.NetHelper.GetLocalIp">
            <summary>
            GetLocalIp 获取本机的IP地址
            </summary>       
        </member>
        <member name="M:ZGD.Network.NetHelper.GetLocalPublicIp">
            <summary>
            GetLocalPublicIp 获取本机的公网IP地址
            </summary>       
        </member>
        <member name="M:ZGD.Network.NetHelper.IsConnectedToInternet">
            <summary>
            IsConnectedToInternet 机器是否联网
            </summary>       
        </member>
        <member name="M:ZGD.Network.NetHelper.GetMacAddress">
            <summary>
            GetMacAddress 获取本机所有网卡的Mac地址
            </summary>       
        </member>
        <member name="M:ZGD.Network.NetHelper.DownLoadFileFromUrl(System.String,System.String)">
            <summary>
            DownLoadFileFromUrl 将url处的文件下载到本地
            </summary>       
        </member>
        <member name="T:ZGD.Network.AgileIPEndPoint">
            <summary>
            AgileIPEndPoint 可xml配置的IPEndPoint。
            </summary>
        </member>
        <member name="T:ZGD.Emit.DynamicProxy.Aop.MethodTimeInterceptor">
            <summary>
            MethodTimeInterceptor 该AroundInterceptor用于监控目标方法执行的时间。
            rabbit 2008.06.13
            </summary>
        </member>
        <member name="T:ZGD.Emit.DynamicProxy.Aop.IAroundInterceptor">
            <summary>
            IAroundInterceptor 对方法进行Around截获处理。注意，必须要触发目标方法的调用。
            rabbit 2008.05.20
            </summary>
        </member>
        <member name="T:ZGD.Emit.DynamicProxy.AopSimple.MethodTimeInterceptor">
            <summary>
            MethodTimeInterceptor 该AroundInterceptor用于监控目标方法执行的时间。
            rabbit 2008.06.13
            </summary>
        </member>
        <member name="T:ZGD.Week">
            <summary>
            Week 周。表示某一个星期。
            rabbit 2009.05.20
            </summary>
        </member>
        <member name="M:ZGD.Week.GetLastMondayDate(System.DateTime)">
            <summary>
            GetLastMondayDate 在获取离dt最近的一个周一。
            </summary>  
        </member>
        <member name="T:ZGD.ObjectManagement.Trees.Multiple.MNode`1">
            <summary>
            MNode IMultiTree中的节点类型
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Trees.Multiple.AgileMultiTree`1">
            <summary>
            AgileMultiTree IAgileMultiTree接口的参考实现，保证是线程安全的。
            </summary>   
        </member>
        <member name="T:ZGD.ObjectManagement.Trees.Multiple.MultiTree`1">
            <summary>
            IMultiTree 的参考实现。该实现是线程安全的。
            </summary>
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Multiple.MultiTree`1.Initialize(ZGD.ObjectManagement.Trees.Multiple.MNode{`0})">
            <summary>
            Initialize 使用已经存在的某个树（或子树）来构造一个新树。
            </summary>      
        </member>
        <member name="P:ZGD.ObjectManagement.Trees.Multiple.MultiTree`1.SmartRWLocker">
            <summary>
            SmartRWLocker 为支持反序列化后_smartRWLocker不为null而设计。
            </summary>
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Multiple.AgileMultiTree`1.AppendOffSprings(System.String,System.String[])">
            <summary>
            SynAppendOffSprings 追加节点必须进行同步处理。
            </summary>       
        </member>
        <member name="T:ZGD.ObjectManagement.Cache.ISmartDictionaryCache`2">
            <summary>
            ISmartDictionaryCache 能自动提取缓存中不存在的object的智能缓存。
            该接口的实现必须是线程安全的。
            </summary>   
        </member>
        <member name="M:ZGD.ObjectManagement.Cache.ISmartDictionaryCache`2.Get(`0)">
            <summary>
            Get 如果缓存中不存在id对应的object，则采用ObjectRetriever提取一次，如果仍然提取不到则返回null。
            </summary>       
        </member>
        <member name="M:ZGD.ObjectManagement.Cache.ISmartDictionaryCache`2.HaveContained(`0)">
            <summary>
            HaveContained 当前容器是否已经存在目标对象。
            </summary>       
        </member>
        <member name="T:ZGD.ObjectManagement.Managers.IRefreshableCacheManager">
            <summary>
            IRefreshableCacheManager 用于管理多个可被刷新的缓存对象，并能定时刷新所管理的缓存。
            rabbit 2007.07.07
            </summary>
        </member>
        <member name="M:ZGD.ObjectManagement.Managers.IRefreshableCacheManager.RefreshNow">
            <summary>
            RefreshNow 手动刷新被管理的所有缓存。
            </summary>
        </member>
        <member name="M:ZGD.ObjectManagement.Managers.IRefreshableCacheManager.AddCache(ZGD.ObjectManagement.Managers.IRefreshableCache)">
            <summary>
            AddCache 动态添加缓存。
            </summary>       
        </member>
        <member name="M:ZGD.ObjectManagement.Managers.IRefreshableCacheManager.RemoveCache(ZGD.ObjectManagement.Managers.IRefreshableCache)">
            <summary>
            RemoveCache 动态移除缓存。
            </summary>       
        </member>
        <member name="P:ZGD.ObjectManagement.Managers.IRefreshableCacheManager.RefreshSpanInSecs">
            <summary>
            RefreshSpanInSecs 定时刷新缓存的时间间隔。
            </summary>
        </member>
        <member name="E:ZGD.ObjectManagement.Managers.IRefreshableCacheManager.CacheRefreshFailed">
            <summary>
            CacheRefreshFailed 当某个缓存刷新抛出异常时，将触发该事件。
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Integration.ScatteredSegmentPicker`2">
            <summary>
            ScatteredSegmentPicker 片段整合提取器。
            ScatteredSegmentPicker将多个片段（ISegment）整合为一个有序的整体，然后可以提取该整体中任意的一有序块（该有序块可能横跨多个ISegment）。
            rabbit 2009.04.02
            </summary>  
            <typeparam name="TSegmentID">片段标志的类型</typeparam>
            <typeparam name="TVal">构成片段的元素的类型</typeparam>
        </member>
        <member name="M:ZGD.ObjectManagement.Integration.ScatteredSegmentPicker`2.Pick(System.Int32,System.Int32)">
            <summary>
            Pick 从整合后的整体中提取有序块。
            </summary>
            <param name="startIndex">目标块在整合后的整体中的起始位置</param>
            <param name="pickCount">提取元素的个数</param>
            <returns>有序的列表（从小到大或从大到小，与PickFromSmallToBig一致）</returns> 
        </member>
        <member name="P:ZGD.ObjectManagement.Integration.ScatteredSegmentPicker`2.PickFromSmallToBig">
            <summary>
            PickFromSmallToBig 提取的顺序，从小到大或反之。
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Increasing.Management.IRoundCachePersister`2">
            <summary>
            IRoundCachePersister 用于持久化或加载RoundCache。
            </summary>   
        </member>
        <member name="M:ZGD.ObjectManagement.Increasing.Management.IRoundCachePersister`2.Persist(`1)">
            <summary>
            Persist 注意，该方法不得抛出异常。
            </summary>       
        </member>
        <member name="T:ZGD.Helpers.FileHelper">
            <summary>
            FileHelper 用于简化与文件相关操作。
            作者：Rabbit 
            2004.03.26
            </summary>
        </member>
        <member name="M:ZGD.Helpers.FileHelper.GenerateFile(System.String,System.String)">
            <summary>
            GenerateFile 将字符串写成文件
            </summary>       
        </member>
        <member name="M:ZGD.Helpers.FileHelper.GetFileContent(System.String)">
            <summary>
            GetFileContent 读取文本文件的内容
            </summary>       
        </member>
        <member name="M:ZGD.Helpers.FileHelper.WriteBuffToFile(System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            WriteBuffToFile 将二进制数据写入文件中
            </summary>    
        </member>
        <member name="M:ZGD.Helpers.FileHelper.WriteBuffToFile(System.Byte[],System.String)">
            <summary>
            WriteBuffToFile 将二进制数据写入文件中
            </summary>   
        </member>
        <member name="M:ZGD.Helpers.FileHelper.ReadFileReturnBytes(System.String)">
            <summary>
            ReadFileReturnBytes 从文件中读取二进制数据
            </summary>      
        </member>
        <member name="M:ZGD.Helpers.FileHelper.GetFileToOpen(System.String)">
            <summary>
            GetFileToOpen 获取要打开的文件路径
            </summary>        
        </member>
        <member name="M:ZGD.Helpers.FileHelper.GetFileToOpen(System.String,System.String,System.String)">
            <summary>
            GetFileToOpen 获取要打开的文件路径
            </summary>      
        </member>
        <member name="M:ZGD.Helpers.FileHelper.GetFolderToOpen(System.Boolean)">
            <summary>
            GetFolderToOpen 获取要打开的文件夹
            </summary>      
        </member>
        <member name="M:ZGD.Helpers.FileHelper.GetPathToSave(System.String,System.String,System.String)">
            <summary>
            GetPathToSave 获取要保存的文件的路径 
            </summary>       
        </member>
        <member name="M:ZGD.Helpers.FileHelper.GetFileNameNoPath(System.String)">
            <summary>
            GetFileNameNoPath 获取不包括路径的文件名
            </summary>      
        </member>
        <member name="M:ZGD.Helpers.FileHelper.GetFileSize(System.String)">
            <summary>
            GetFileSize 获取目标文件的大小
            </summary>        
        </member>
        <member name="M:ZGD.Helpers.FileHelper.ReadFileData(System.IO.FileStream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            ReadFileData 从文件流中读取指定大小的内容
            </summary>       
        </member>
        <member name="M:ZGD.Helpers.FileHelper.GetFileDirectory(System.String)">
            <summary>
            GetFileDirectory 获取文件所在的目录路径
            </summary>       
        </member>
        <member name="M:ZGD.Helpers.FileHelper.DeleteFile(System.String)">
            <summary>
            DeleteFile 删除文件
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:ZGD.Helpers.FileHelper.EnsureExtendName(System.String,System.String)">
            <summary>
            EnsureExtendName 确保扩展名正确
            </summary>       
        </member>
        <member name="T:ZGD.Emit.DynamicProxy.SimpleProxyEmitter">
            <summary>
            SimpleProxyEmitter 生成的动态代理类型将继承TInterface接口，并且动态类型有一个类型为originType构造参数。
            动态类型针对TInterface接口的所有实现将转发给从Ctor传入的originType实例完成。
            注意：originType 必须是public修饰的
            注意：TInterface只支持非泛型接口，但接口中可以包括泛型方法。
            rabbit 最后一次整理：2007.08.02
            </summary>
        </member>
        <member name="T:ZGD.Emit.DynamicProxy.IProxyEmitter">
            <summary>
            IProxyEmitter 用于发射指定类型的动态代理类型。
            TInterface 不能是泛型接口，但是TInterface可以包括泛型方法(泛型参数可以有约束)。支持ref/out参数。 
            </summary>
        </member>
        <member name="M:ZGD.Emit.DynamicProxy.IProxyEmitter.EmitProxyType``1(System.Type)">
            <summary>
            EmitProxyType 用于originType没有实现TInterface的情况。
            </summary>       
        </member>
        <member name="M:ZGD.Emit.DynamicProxy.BaseProxyEmitter.GetDynamicTypeName(System.Type,System.Type)">
            <summary>
            GetDynamicTypeName 获取要动态生成的类型的名称。注意，子类一定要使用本方法来得到动态类型的名称。
            </summary>    
        </member>
        <member name="M:ZGD.Emit.DynamicProxy.BaseProxyEmitter.GetPostfixOfDynamicTypeName">
            <summary>
            GetPostfixOfDynamicTypeName 获取要动态生成的类型名称的后缀
            </summary>  
        </member>
        <member name="T:ZGD.Emit.DynamicProxy.Aop.AopProxyEmitter">
            <summary>
            AopProxyEmitter 用于发射AOP Proxy。AOP动态代理支持预处理、后处理，以及Around处理。分别由IMethodInterceptor和IAroundInterceptor支持。
            注意，该AopProxyEmitter发射的AOP代理最后对截获的目标方法的调用是经过反射调用的，所以可能会影响性能。
            所以，如果是截获异常，直接使用ExceptionFilterProxyEmitter效率更高。
            rabbit 2008.05.20 支持ref/out参数
            </summary>
        </member>
        <member name="T:ZGD.ShortTime">
            <summary>
            ShortTime 用于指定小时、分钟、秒。比如上班时间、下班时间。
            rabbit 2007.01.08
            </summary>
        </member>
        <member name="M:ZGD.ShortTime.IsOnTime(System.DateTime,System.Int32)">
            <summary>
            IsOnTime 目标时间是否与当前对象所表示的时间的差值是否在maxToleranceInSecs范围之内。
            </summary>       
        </member>
        <member name="T:ZGD.EnumDescription">
            <summary>
            EnumDescription 用于描述枚举的特性。	
            </summary>
        </member>
        <member name="M:ZGD.EnumDescription.DoGetFieldTexts(System.Type)">
            <summary>
            DoGetFieldTexts 得到枚举类型定义的所有枚举值的描述文本		
            </summary>	
        </member>
        <member name="M:ZGD.EnumDescription.GetEnumDescriptionText(System.Type)">
            <summary>
            GetEnumDescriptionText 获取枚举类型的描述文本。
            </summary>	   
        </member>
        <member name="M:ZGD.EnumDescription.GetEnumTag(System.Type)">
            <summary>
            GetEnumTag 获取枚举类型携带的Tag。
            </summary>
        </member>
        <member name="M:ZGD.EnumDescription.GetFieldText(System.Object)">
            <summary>
            GetFieldDescriptionText 获得指定枚举值的描述文本。
            </summary>		
        </member>
        <member name="M:ZGD.EnumDescription.GetFieldTag(System.Object)">
            <summary>
            GetFieldTag 获得指定枚举值的Tag。
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:ZGD.EnumDescription.GetEnumValueByTag(System.Type,System.Object)">
            <summary>
            GetEnumValueByTag 根据描述Tag获取对应的枚举值
            </summary>     
        </member>
        <member name="M:ZGD.Widget.ExListView.CreateButtons">
            <summary>
            Method for generation ToolStrip Buttons on GroupBy ToolStrip
            </summary>
        </member>
        <member name="T:ZGD.Threading.Timers.RichTimer.TimerConfigure">
            <summary>
            TimerConfigure 对TimerConfiguration进行配置的控件。
            rabbit 2006.06
            </summary>
        </member>
        <member name="T:ZGD.Threading.Timers.RichTimer.ITimerConfigure">
            <summary>
            ITimerConfigure UI实现此接口以提供对TimerConfiguration的设置。
            rabbit 2006.06
            </summary>
        </member>
        <!-- 对于成员“F:ZGD.Threading.Timers.RichTimer.TimerConfigure.components”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:ZGD.Threading.Timers.RichTimer.TimerConfigure.Dispose(System.Boolean)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:ZGD.Threading.Timers.RichTimer.TimerConfigure.InitializeComponent”忽略有格式错误的 XML 注释 -->
        <member name="T:ZGD.Threading.Timers.RichTimer.ITimerTaskManager">
            <summary>
            ITimerTaskManager 多功能定时任务管理器，管理所有的定时任务的执行
            在Ctor中启动线程
            rabbit 2006.06
            </summary>
        </member>
        <member name="M:ZGD.Threading.Timers.RichTimer.ITimerTaskManager.Initialize">
            <summary>
            Initialize 初始化并启动内部定时器
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.FixedQueue`1">
            <summary>
            FixedQueue 固定大小的队列，当到达Capacity时，缓存新object，则最先缓存的object会被删除掉。
            FixedQueue是线程安全的。
            </summary>  
        </member>
        <member name="M:ZGD.Helpers.StringHelper.AnalyzeConfigString(System.String)">
            <summary>
            AnalyzeConfigString 各配置项采用分号分隔，使用"="连接key与value
            </summary>
        </member>
        <member name="M:ZGD.Helpers.StringHelper.ConvertChineseToSpell(System.String)">
            <summary>
            ConvertChineseToSpell 将汉字转化为拼音
            </summary>		
        </member>
        <member name="M:ZGD.Helpers.StringHelper.SplitStringTo``1(System.String,System.Char)">
            <summary>
            SplitStringTo 将目标字符串分割成多个目标类型的值
            </summary>        
        </member>
        <member name="M:ZGD.Helpers.StringHelper.SplitStringToStrs(System.String,System.Char)">
            <summary>
            SplitStringToStrs 将目标字符串进行分割，并对分割值进行修整
            </summary>
        </member>
        <member name="M:ZGD.Helpers.ApplicationHelper.StartApplication(System.String)">
            <summary>
            StartApplication 启动一个应用程序/进程
            </summary>       
        </member>
        <member name="M:ZGD.Helpers.ApplicationHelper.IsAppInstanceExist(System.String)">
            <summary>
            IsAppInstanceExist 目标应用程序是否已经启动。通常用于判断单实例应用。
            </summary>       
        </member>
        <member name="M:ZGD.Helpers.ApplicationHelper.OpenUrl(System.String)">
            <summary>
            OpenUrl 在浏览器中打开wsUrl链接
            </summary>        
        </member>
        <member name="T:ZGD.DataStructure.IPriorityManager">
            <summary>
            IPriorityManager 依据时间来管理所有waiter的优先级。线程安全。
            rabbit 2007.04.16 
            </summary>
        </member>
        <member name="M:ZGD.DataStructure.IPriorityManager.GetNextWaiter">
            <summary>
            GetNextWaiter 返回等待时间最长的waiter。
            注意，返回时并不会从等待列表中删除waiter。如果要删除某个等待者，请调用RemoveWaiter。
            </summary>       
        </member>
        <member name="T:ZGD.DispersiveKeyScope">
            <summary>
            DispersiveKeyScope 用于表示多个整数范围和一组离散的整数值
            </summary>
        </member>
        <member name="T:ZGD.Emit.DynamicProxy.Aop.IMethodInterceptor">
            <summary>
            IMethodInterceptor 对方法进行截获并加入预处理和后处理。
            rabbit 2008.05.20
            </summary>
        </member>
        <member name="T:ZGD.Addins.AddinUtil">
            <summary>
            AddinUtil static class 。
            用于宿主应用程序向插件传递必要的参数信息
            </summary>
        </member>
        <member name="F:ZGD.Widget.AgileProgressBar.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:ZGD.Widget.AgileProgressBar.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:ZGD.Widget.AgileProgressBar.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:ZGD.Threading.Timers.TimingTaskType">
            <summary>
            TimingTaskType 定时任务的类型 
            </summary>
        </member>
        <member name="T:ZGD.Threading.Timers.TimingTaskManager">
            <summary>
            TimingTaskManager 用于管理所有的定时任务，并在时间到达时，异步执行任务。
            </summary>
        </member>
        <member name="T:ZGD.Threading.Timers.RichTimer.RichTimerType">
            <summary>
            RichTimerType 定时器类型 
            </summary>
        </member>
        <member name="F:ZGD.Threading.Timers.RichTimer.RichTimerType.EverySpan">
            <summary>
            EverySpan 在TimerConfiguration将Hour、Minute、Second属性看作Span的设置
            </summary>
        </member>
        <member name="T:ZGD.Threading.Timers.CallbackTask`1">
            <summary>
            CallbackTask 用于封装一个定时回调任务。
            </summary>    
        </member>
        <member name="P:ZGD.Threading.Timers.CallbackTask`1.Callback">
            <summary>
            Callback 回调执行时，不允许抛出任何异常
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Trees.Multiple.IAgileNodePicker`1">
            <summary>
            IAgileNodePicker 用于从其它地方（如数据库等）提取特定节点的信息
            </summary>   
        </member>
        <member name="T:ZGD.ObjectManagement.IObjectRetriever`2">
            <summary>
            IObjectRetriever 对象提取器。比如，智能缓存用于从其它地方获取缓存中不存在的object。    
            </summary>  
        </member>
        <member name="M:ZGD.ObjectManagement.IObjectRetriever`2.Retrieve(`0)">
            <summary>
            Retrieve 根据ID获取目标对象。
            </summary>
        </member>
        <member name="M:ZGD.ObjectManagement.IObjectRetriever`2.RetrieveAll">
            <summary>
            RetrieveAll 获取所有的对象。
            </summary>      
        </member>
        <member name="T:ZGD.ObjectManagement.Trees.Binary.Heap`1">
            <summary>
            Heap IHeap接口的参考实现，默认为最大堆。该实现是线程安全的。
            </summary>
        </member>
        <member name="P:ZGD.ObjectManagement.Trees.Binary.Heap`1.SmartRWLocker">
            <summary>
            SmartRWLocker 为支持反序列化后_smartRWLocker不为null而设计。
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Pool.DefaultPooledObjectCreator`1">
            <summary>
            DefaultPooledObjectCreator 直接使用被池化类型的默认构造函数创建对象。
            rabbit 2008.06.13
            </summary>   
        </member>
        <member name="T:ZGD.ObjectManagement.Managers.PriorityManager`1">
            <summary>
            PriorityManager 具有优先级的对象的管理器。该实现是线程安全的。
            </summary>
            <typeparam name="T">被管理的对象的类型，必须从IPriorityObject继承。</typeparam>
            注意：在PriorityManager中，优先等级是用int表示的，是从0开始连续的一串整数，整数值越小，表明优先级越高。
            当Initialize方法被执行后，优先等级的范围就被固定下来。比如PriorityLevelCount值设为4，则PriorityManager所支持的优先等级即为：0，1，2，3
        </member>
        <member name="M:ZGD.ObjectManagement.Managers.PriorityManager`1.GetNextWaiter">
            <summary>
            GetNextWaiter 返回优先级别最高且等待时间最长的waiter。
            注意，返回时并不会从等待列表中删除waiter。如果要删除某个等待者，请调用RemoveWaiter。
            </summary>       
        </member>
        <member name="P:ZGD.ObjectManagement.Managers.PriorityManager`1.PriorityLevelCount">
            <summary>
            PriorityLevelCount 优先级分为几个等级。一旦Initialize执行完毕，该属性便不可以被修改。或者说，即使被修改，也不会产生任何效果。
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Cache.IHotCache`2">
            <summary>
            IHotCache 用于缓存那些活跃的对象，并定时删除不活跃的对象。该接口的实现必须是线程安全的。
            </summary>    
        </member>
        <member name="M:ZGD.ObjectManagement.Cache.IHotCache`2.Get(`0)">
            <summary>
            Get 如果缓存中存在目标则直接返回，否则通过ObjectRetriever提取对象并缓存。
            </summary>      
        </member>
        <member name="P:ZGD.ObjectManagement.Cache.IHotCache`2.DetectSpanInSecs">
            <summary>
            DetectSpanInSecs 多长时间检测一次对象是否活跃，单位：秒。
            </summary>
        </member>
        <member name="P:ZGD.ObjectManagement.Cache.IHotCache`2.MaxMuteSpanInMinutes">
            <summary>
            MaxMuteSpanInMinutes 对象最大的沉默时间（分钟）。如果一个对象在MaxMuteSpanInMinutes时间间隔内都不被访问，则将被从缓存中清除。
            如果该属性的值被设置为小于或等于0，则表示永远不会从缓存中清除。
            </summary>
        </member>
        <member name="P:ZGD.ObjectManagement.Cache.IHotCache`2.MaxCachedCount">
            <summary>
            MaxCachedCount 最多缓存的对象个数。当超过此个数时，不再缓存新的对象。
            </summary>
        </member>
        <member name="T:ZGD.Emit.Application.AgileCreator">
            <summary>
            AgileCreator 在需要大量的动态创建实例的时候，使用AgileCreator取代基于反射的对象创建以提高创建效率。
            调用AgileCreator.New()方法创建对象。
            rabbit 2007.01.26
            </summary>
        </member>
        <member name="M:ZGD.Emit.Application.AgileCreator.GetCreator(System.Type,System.Object[])">
            <summary>
            GetCreator 动态产生一个派生自AgileCreator的类，并生成其实例
            </summary>       
        </member>
        <member name="M:ZGD.Emit.Application.AgileCreator.CreateObject(System.Object[])">
            <summary>
            CreateObject AgileCreator的派生类（通过GetCreator动态创建）将实现该方法，方法的实现中直接采用高效的new操作符来创建对象。
            </summary>    
        </member>
        <member name="T:ZGD.KeyScope">
            <summary>
            KeyScope 用于表示一个整数范围。
            </summary>	
        </member>
        <member name="P:ZGD.KeyScope.ScopeString">
            <summary>
            ScopeString 以英文逗号分隔，如"10,1000"
            </summary>
        </member>
        <member name="T:ZGD.Threading.Synchronize.LockingObject">
            <summary>
            LockingObject SmartRWLocker的Lock方法返回的锁对象。仅仅通过using来使用该对象，如：using(this.smartLocker.Lock(AccessMode.Read)){...}
            </summary>
        </member>
        <member name="T:ZGD.Threading.Application.CircleTaskSwitcher`1">
            <summary>
            CircleTaskSwitcher 循环任务切换器。将一天24小时分为多个时段，在不同的时段，会有不同的任务。当到达任务切换点时，切换器会触发切换事件。
            </summary>
            <typeparam name="TaskType">任务的类型</typeparam> 
        </member>
        <member name="P:ZGD.Threading.Application.CircleTaskSwitcher`1.TaskDictionary">
            <summary>
            TaskDictionary key为任务的起始点hour，value为对应的任务。
            </summary>
        </member>
        <member name="P:ZGD.Security.ISymmetryCryptor.SymmetricAlgorithmType">
            <summary>
            SymmetricAlgorithmType 采用的加密算法类型。
            如果是DES加密，则要求64位密匙。
            如果是Rijndael加密，则支持 128、192 或 256 位的密钥长度。
            如果是RC2加密，则支持的密钥长度为从 40 位到 128 位，以 8 位递增。
            如果是TripleDES加密，则支持从 128 位到 192 位（以 64 位递增）的密钥长度。
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Trees.Binary.MinMaxHeap`1">
            <summary>
            MinMaxHeap 最小最大堆，由最小层、最大层、最小层、最大层交替出现，根结点（第一层）为最小层，根结点也是最小结点，所有最小层，小的值在上层。
            第二层为最大层，其中较大的一个子结点为最大值。所有最大层也是大的值在上层。
            </summary>
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Binary.MinMaxHeap`1.Insert(`0)">
            <summary>
            把新的结点插入到完全二叉树的最后一个结点，然后保证满足最小最大堆的条件，调整堆。
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Binary.MinMaxHeap`1.RemoveMin">
            <summary>
            把最后一个结点的值赋给跟结点，然后调整堆，保证堆是最小最大堆
            </summary>        
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Binary.MinMaxHeap`1.RemoveMax">
            <summary>
            把最后一个结点的值赋给跟结点中较大的子结点，然后删除最后的一个结点，保证堆是最大最小堆
            </summary>        
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Binary.MinMaxHeap`1.VerifyRootSmallThanChildren(ZGD.ObjectManagement.Trees.Binary.Node{`0})">
            <summary>
            确保根结点比子结点小
            </summary>
        </member>
        <member name="M:ZGD.ObjectManagement.Trees.Binary.MinMaxHeap`1.VerifyRootBiggerThanChildren(ZGD.ObjectManagement.Trees.Binary.Node{`0})">
             <summary>
            确保根结点比子结点大
             </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Increasing.Management.IRoundCache`1">
            <summary>
            IRoundCache 某一Round的完整的数据缓存。用于被序列化存储。
            </summary>
        </member>
        <member name="T:ZGD.Helpers.ReflectionHelper">
            <summary>
            ReflectionHelper 的摘要说明。
            </summary>
        </member>
        <member name="M:ZGD.Helpers.ReflectionHelper.GetType(System.String)">
            <summary>
            GetType  通过完全限定的类型名来加载对应的类型。typeAndAssName如"ZGD.Filters.SourceFilter,ZGD"。
            如果为系统简单类型，则可以不带程序集名称。
            </summary>       
        </member>
        <member name="M:ZGD.Helpers.ReflectionHelper.GetType(System.String,System.String)">
            <summary>
            GetType 加载assemblyName程序集中的名为typeFullName的类型。assemblyName不用带扩展名，如果目标类型在当前程序集中，assemblyName传入null	
            </summary>		
        </member>
        <member name="M:ZGD.Helpers.ReflectionHelper.LoadDerivedInstance``1(System.Reflection.Assembly)">
            <summary>
            LoadDerivedInstance 将程序集中所有继承自TBase的类型实例化
            </summary>
            <typeparam name="TBase">基础类型（或接口类型）</typeparam>
            <param name="asm">目标程序集</param>
            <returns>TBase实例列表</returns>
        </member>
        <member name="M:ZGD.Helpers.ReflectionHelper.LoadDerivedType(System.Type,System.String,System.Boolean,ZGD.Helpers.ReflectionHelper.TypeLoadConfig)">
            <summary>
            LoadDerivedType 加载directorySearched目录下所有程序集中的所有派生自baseType的类型
            </summary>
            <typeparam name="baseType">基类（或接口）类型</typeparam>
            <param name="directorySearched">搜索的目录</param>
            <param name="searchChildFolder">是否搜索子目录中的程序集</param>
            <param name="config">高级配置，可以传入null采用默认配置</param>        
            <returns>所有从BaseType派生的类型列表</returns>
        </member>
        <member name="M:ZGD.Helpers.ReflectionHelper.SetProperty(System.Collections.Generic.IList{System.Object},System.String,System.Object)">
            <summary>
            SetProperty 如果list中的object具有指定的propertyName属性，则设置该属性的值为proValue
            </summary>		
        </member>
        <member name="M:ZGD.Helpers.ReflectionHelper.SetProperty(System.Object,System.String,System.Object,System.Boolean)">
            <summary>
            SetProperty 如果object具有指定的propertyName属性，则设置该属性的值为proValue
            </summary>		
        </member>
        <member name="M:ZGD.Helpers.ReflectionHelper.GetProperty(System.Object,System.String)">
            <summary>
            GetProperty 根据指定的属性名获取目标对象该属性的值
            </summary>
        </member>
        <member name="M:ZGD.Helpers.ReflectionHelper.GetFieldValue(System.Object,System.String)">
            <summary>
            GetFieldValue 取得目标对象的指定field的值，field可以是private
            </summary>      
        </member>
        <member name="M:ZGD.Helpers.ReflectionHelper.SetFieldValue(System.Object,System.String,System.Object)">
            <summary>
            SetFieldValue 设置目标对象的指定field的值，field可以是private
            </summary>      
        </member>
        <member name="M:ZGD.Helpers.ReflectionHelper.CopyProperty(System.Object,System.Object)">
            <summary>
            CopyProperty 将source中的属性的值赋给target上同名的属性
            使用CopyProperty可以方便的实现拷贝构造函数
            </summary>        
        </member>
        <member name="M:ZGD.Helpers.ReflectionHelper.CopyProperty(System.Object,System.Object,System.Collections.Generic.IList{ZGD.MapItem})">
            <summary>
            CopyProperty 将source中的属性的值赋给target上想匹配的属性，匹配关系通过propertyMapItemList确定
            </summary>        
        </member>
        <member name="M:ZGD.Helpers.ReflectionHelper.GetAllMethods(System.Type[])">
            <summary>
            GetAllMethods 获取接口的所有方法信息，包括继承的
            </summary>       
        </member>
        <member name="M:ZGD.Helpers.ReflectionHelper.SearchGenericMethodInType(System.Type,System.String,System.Type[])">
            <summary>
            SearchGenericMethodInType 搜索指定类型定义的泛型方法，不包括继承的。
            </summary>       
        </member>
        <member name="M:ZGD.Helpers.ReflectionHelper.SearchMethod(System.Type,System.String,System.Type[])">
            <summary>
            SearchMethod 包括被继承的所有方法，也包括泛型方法。
            </summary>       
        </member>
        <member name="P:ZGD.Helpers.ReflectionHelper.TypeLoadConfig.CopyToMemory">
            <summary>
            CopyToMem 是否将程序集拷贝到内存后加载
            </summary>
        </member>
        <member name="P:ZGD.Helpers.ReflectionHelper.TypeLoadConfig.LoadAbstractType">
            <summary>
            LoadAbstractType 是否加载抽象类型
            </summary>
        </member>
        <member name="P:ZGD.Helpers.ReflectionHelper.TypeLoadConfig.TargetFilePostfix">
            <summary>
            TargetFilePostfix 搜索的目标程序集的后缀名
            </summary>
        </member>
        <member name="M:ZGD.Helpers.MachineHelper.GetMacAddress">
            <summary>
            GetMacAddress 获取网卡mac地址
            </summary>        
        </member>
        <member name="T:ZGD.Network.Tcp.ITcpConnectionPool">
            <summary>
            ITcpConnectionPool Tcp连接池。
            </summary>
        </member>
        <member name="M:ZGD.Network.Tcp.ITcpConnectionPool.RentTcpStream">
            <summary>
            RentTcpStream 如果没有可用连接，则返回null。
            </summary>       
        </member>
        <member name="M:ZGD.Network.Tcp.ITcpConnectionPool.RentTcpStreamToSucceed">
            <summary>
            RentTcpStreamToSucceed 如果没有可用连接，则阻塞一直等待到有空闲的连接为止。如果服务器不可用，则返回null 。
            </summary>       
        </member>
        <member name="T:ZGD.DateTimeScope">
            <summary>
            DateTimeScope 时间范围。
            rabbit
            </summary>
        </member>
        <member name="T:ZGD.Emit.DynamicProxy.AopSimple.SimpleAopProxyEmitter">
            <summary>
            SimpleProxyEmitter 生成的动态代理类型将继承TInterface接口，并且动态类型有一个类型为originType构造参数。 
            动态类型针对TInterface接口的所有实现将转发给从Ctor传入的originType实例完成。
            注意：originType 必须是public修饰的
            注意：TInterface只支持非泛型接口，但接口中可以包括泛型方法。
            与AopProxyEmitter相比，主要是SimpleProxyEmitter生成的动态代理是直接调用被截获的方法的，而AopProxyEmitter生成的动态代理是通过反射调用被截获的方法的。
            rabbit 最后一次整理：2007.08.02
            </summary>
        </member>
        <member name="T:ZGD.Threading.Timers.RichTimer.TimerConfiguration">
            <summary>
            TimerConfiguration 定时详细设置
            TimerConfiguration可以不依赖ZGD.RichTimer空间中的其他组件而被单独轻量地使用。使用TimerConfigure来进行UI配置。
            rabbit 2006.06
            </summary>
        </member>
        <member name="P:ZGD.Threading.Timers.RichTimer.TimerConfiguration.TargetTimeForJustOnce">
            <summary>
            TargetTimeForJustOnce 仅仅为RichTimerType.JustOnce类型时，该设置才有效
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Cache.IHiberarchyVal">
            <summary>
            IHiberarchyVal 可以存放在HiberarchyCache的对象必须实现该接口。
            </summary>
        </member>
        <member name="T:ZGD.Network.IStringEncoder">
            <summary>
            StringEncoder 指定字符串转换成流时的编码格式
            </summary>
        </member>
        <member name="T:ZGD.Geometry.CompassDirections">
            <summary>
            CompassDirections 代表8个方向。
            </summary>
        </member>
        <member name="M:ZGD.Geometry.CompassDirectionsHelper.GetAntiCompassDirections(ZGD.Geometry.CompassDirections)">
            <summary>
            GetAntiCompassDirections 获取当前方向相反的方向。
            </summary>       
        </member>
        <member name="T:ZGD.Emit.DynamicProxy.IExceptionFilter">
            <summary>
            IExceptionFilter 用于记录异常的详细信息
            </summary>
        </member>
        <member name="T:ZGD.Arithmetic.AStar.AStarNode">
            <summary>
            AStarNode 用于保存规划到当前节点时的各个Cost值以及父节点。
            rabbit 2008.10.18
            </summary>
        </member>
        <member name="M:ZGD.Arithmetic.AStar.AStarNode.ResetPreviousNode(ZGD.Arithmetic.AStar.AStarNode,System.Int32)">
            <summary>
            ResetPreviousNode 当从起点到达本节点有更优的路径时，调用该方法采用更优的路径。
            </summary>        
        </member>
        <member name="P:ZGD.Arithmetic.AStar.AStarNode.Location">
            <summary>
            Location 节点所在的位置，其X值代表ColumnIndex，Y值代表LineIndex
            </summary>
        </member>
        <member name="P:ZGD.Arithmetic.AStar.AStarNode.PreviousNode">
            <summary>
            PreviousNode 父节点，即是由哪个节点导航到当前节点的。
            </summary>
        </member>
        <member name="P:ZGD.Arithmetic.AStar.AStarNode.CostF">
            <summary>
            CostF 从起点导航经过本节点然后再到目的节点的估算总代价。
            </summary>
        </member>
        <member name="P:ZGD.Arithmetic.AStar.AStarNode.CostG">
            <summary>
            CostG 从起点导航到本节点的代价。
            </summary>
        </member>
        <member name="P:ZGD.Arithmetic.AStar.AStarNode.CostH">
            <summary>
            CostH 使用启发式方法估算的从本节点到目的节点的代价。
            </summary>
        </member>
        <member name="P:ZGD.ObjectManagement.Cache.HotCache`2.Count">
            <summary>
            Count 容器中缓存对象的个数。
            </summary>
        </member>
        <member name="P:ZGD.ObjectManagement.Cache.HotCache`2.NonexistentCount">
            <summary>
            NonexistentCount Get方法返回为null的次数。
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Managers.RefreshableCacheManager">
            <summary>
            RefreshableCacheManager 用于管理多个可被刷新的缓存对象，并能定时刷新所管理的缓存。
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Circle`1">
            <summary>
            Circle 圈结构。
            </summary>
            <typeparam name="T">圈的每个节点存储的对象的类型</typeparam>
        </member>
        <member name="T:ZGD.Helpers.SerializeHelper">
            <summary>
            SerializeHelper 用于简化序列化和反序列化操作 。    
            作者：Rabbit 
            2004.05.12
            </summary>
        </member>
        <member name="M:ZGD.Helpers.SerializeHelper.SerializeObjectToString(System.Object)">
            <summary>
            SerializeObjectToString 将对象序列化为SOAP XML 格式。
            如果要将对象转化为简洁的xml格式，请使用ZGD.Persistence.SimpleXmlConverter类。
            </summary>        
        </member>
        <member name="M:ZGD.Helpers.SerializeHelper.SaveToFile(System.Object,System.String)">
            <summary>
            SaveToFile 将对象的二进制序列化后保存到文件。
            </summary>       
        </member>
        <member name="M:ZGD.Helpers.SerializeHelper.ReadFromFile(System.String)">
            <summary>
            ReadFromFile 从文件读取二进制反序列化为对象。
            </summary> 
        </member>
        <member name="T:ZGD.Network.Tcp.IAgileTcpListener">
            <summary>
            IXTcpListener 用于封装TCP监听者及监听线程。
            作者：Rabbit 
            2008.05.23
            </summary>
        </member>
        <member name="M:ZGD.Network.Tcp.IAgileTcpListener.Start">
            <summary>
            Start 开始监听
            </summary>
        </member>
        <member name="M:ZGD.Network.Tcp.IAgileTcpListener.Stop">
            <summary>
            Stop 停止监听
            </summary>
        </member>
        <member name="E:ZGD.Network.Tcp.IAgileTcpListener.TcpConnectionEstablished">
            <summary>
            TcpConnectionEstablished 当新的Tcp连接成功建立时，会触发此事件	
            </summary>
        </member>
        <member name="P:ZGD.Network.Tcp.IAgileTcpListener.IdleSpanInMSec">
            <summary>
            IdleSpanInMSec 连接检测时间间隔，单位为ms。指示当没有连接请求时，间隔多久再次检测。
            </summary>
        </member>
        <member name="P:ZGD.Network.Tcp.IAgileTcpListener.MaxConnectionCount">
            <summary>
            MaxConnectionCount 允许的最大连接数
            </summary>
        </member>
        <member name="T:ZGD.Network.Tcp.AgileTcpListener">
            <summary>
            AgileTcpListener 是IAgileTcpListener的默认实现
            </summary>
        </member>
        <member name="M:ZGD.Collections.CollectionHelper.Find``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Find 从集合中选取符合条件的元素
            </summary>       
        </member>
        <member name="M:ZGD.Collections.CollectionHelper.FindFirstSpecification``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            FindFirstSpecification 返回符合条件的第一个元素
            </summary>      
        </member>
        <member name="M:ZGD.Collections.CollectionHelper.ContainsSpecification``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0@)">
            <summary>
            ContainsSpecification 集合中是否包含满足predicate条件的元素。
            </summary>       
        </member>
        <member name="M:ZGD.Collections.CollectionHelper.ContainsSpecification``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            ContainsSpecification 集合中是否包含满足predicate条件的元素。
            </summary>       
        </member>
        <member name="M:ZGD.Collections.CollectionHelper.ActionOnSpecification``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Predicate{``0})">
            <summary>
            ActionOnSpecification 对集合中满足predicate条件的元素执行action。如果没有条件，predicate传入null。
            </summary>       
        </member>
        <member name="M:ZGD.Collections.CollectionHelper.ActionOnEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            ActionOnEach  对集合中的每个元素执行action。
            </summary>        
        </member>
        <member name="M:ZGD.Collections.CollectionHelper.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Int32@)">
            <summary>
            BinarySearch 从已排序的列表中，采用二分查找找到目标在列表中的位置。
            如果刚好有个元素与目标相等，则返回true，且minIndex会被赋予该元素的位置；否则，返回false，且minIndex会被赋予比目标小且最接近目标的元素的位置
            </summary>       
        </member>
        <member name="M:ZGD.Collections.CollectionHelper.GetIntersection``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            GetIntersection 高效地求两个List元素的交集。
            </summary>        
        </member>
        <member name="M:ZGD.Collections.CollectionHelper.GetUnion``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            GetUnion 高效地求两个List元素的并集。
            </summary> 
        </member>
        <member name="T:ZGD.Arithmetic.AStar.RoutePlanData">
            <summary>
            RoutePlanData 用于封装一次路径规划过程中的规划信息。
            </summary>
        </member>
        <member name="P:ZGD.Arithmetic.AStar.RoutePlanData.CellMap">
            <summary>
            CellMap 地图的矩形大小。经过单元格标准处理。
            </summary>
        </member>
        <member name="P:ZGD.Arithmetic.AStar.RoutePlanData.ClosedList">
            <summary>
            ClosedList 关闭列表，即存放已经遍历处理过的节点。
            </summary>
        </member>
        <member name="P:ZGD.Arithmetic.AStar.RoutePlanData.OpenedList">
            <summary>
            OpenedList 开放列表，即存放已经开发但是还未处理的节点。
            </summary>
        </member>
        <member name="P:ZGD.Arithmetic.AStar.RoutePlanData.Destination">
            <summary>
            Destination 目的节点的位置。
            </summary>
        </member>
        <member name="T:ZGD.Emit.Management.DynamicAssemblyManager">
            <summary>
            DynamicAssemblyManager 用于管理所有Emit的动态程序集。并且处理AppDomain.AssemblyResolve事件，确保动态程序集被正常使用。
            </summary>
        </member>
        <member name="T:ZGD.Threading.Timers.RichTimer.TimerTask">
            <summary>
            TimerTask 定时任务配置，在时间满足时将异步调用会调方法，目标方法应截获所有异常。
            rabbit 2006.06
            </summary>
        </member>
        <member name="T:ZGD.Threading.Engines.IWorkerEngine`1">
            <summary>
            IWorkerEngine 工作者引擎。用于在后台使用多线程不间断、连续地处理任务。
            一群工作者线程轮流从工作队列中取出工作进行处理，模仿完成端口的机制。
            </summary>    
        </member>
        <member name="M:ZGD.Threading.Engines.IWorkerEngine`1.AddWork(`0)">
            <summary>
            AddWork 添加任务。
            </summary>       
        </member>
        <member name="P:ZGD.Threading.Engines.IWorkerEngine`1.IdleSpanInMSecs">
            <summary>
            IdleSpanInMSecs 当没有工作要处理时，工作者线程休息的时间间隔。默认为10ms
            </summary>
        </member>
        <member name="P:ZGD.Threading.Engines.IWorkerEngine`1.WorkerThreadCount">
            <summary>
            WorkerThreadCount 工作者线程的数量。默认值为1。
            </summary>
        </member>
        <member name="P:ZGD.Threading.Engines.IWorkerEngine`1.WorkProcesser">
            <summary>
            WorkProcesser 用于处理任务的处理器。
            </summary>
        </member>
        <member name="P:ZGD.Threading.Engines.IWorkerEngine`1.WorkCount">
            <summary>
            WorkCount 当前任务队列中的任务数。
            </summary>
        </member>
        <member name="P:ZGD.Threading.Engines.IWorkerEngine`1.MaxWaitWorkCount">
            <summary>
            MaxWaitWorkCount 历史中最大的处于等待状态的任务数量。
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Trees.Binary.BinaryTreeDrawer`1">
            <summary>
            BinaryDrawer IBinaryDrawer 的默认实现。
            作者：Rabbit 
            2008.05.11
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Pool.IObjectPool`1">
            <summary>
            IObjectPool 对象池。
            rabbit 2008.06.13
            </summary>
        </member>
        <member name="P:ZGD.ObjectManagement.Pool.IObjectPool`1.MinObjectCount">
            <summary>
            MinObjectCount 对象池中最少同时存在的对象数。
            </summary>
        </member>
        <member name="P:ZGD.ObjectManagement.Pool.IObjectPool`1.MaxObjectCount">
            <summary>
            MaxObjectCount 对象池中最多同时存在的对象数。
            </summary>
        </member>
        <member name="P:ZGD.ObjectManagement.Pool.IObjectPool`1.DetectSpanInMSecs">
            <summary>
            DetectSpanInMSecs 当池中没有空闲的对象且数量已达到MaxObjectCount时，如果这时发生Rent调用，则检测空闲对象的时间间隔。
            默认值为10ms。 
            </summary>
        </member>
        <member name="P:ZGD.ObjectManagement.Pool.IObjectPool`1.PooledObjectCreator">
            <summary>
            PooledObjectCreator 用于创建池中对象的创建器。默认为DefaultPooledObjectCreator
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Managers.IRefreshableCache">
            <summary>
            IRefreshableCache 能够进行刷新的缓存，被IRefreshableCacheManager统一管理。
            rabbit 2007.07.07
            </summary>
        </member>
        <member name="P:ZGD.ObjectManagement.Managers.IRefreshableCache.RefreshSpanInSecs">
            <summary>
            RefreshSpanInSecs 定时刷新的时间间隔（秒）。如果设置为0，则表示与IRefreshableCacheManager的刷新时间统一。
            </summary>
        </member>
        <member name="P:ZGD.ObjectManagement.Managers.IRefreshableCache.LastRefreshTime">
            <summary>
            LastRefreshTime 最后一次刷新时间。
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Increasing.IncreaseAutoRetriever`4">
            <summary>
            IncreaseAutoRetriever 增量数据自动获取器。每隔一段时间就从各个来源（TSourceToken）获取一次增量（TObject），并触发事件将增量发布出去。
            (1)一个Round由多个连续的Phase构成。当获取某Round的最后一个Phase增量时，触发的事件中的isLastPhaseOfRound参数为true。
            (2)假设增量标志是逐渐递增的。
            rabbit 2009.02.24
            </summary>
            <typeparam name="TSourceToken">增量来源的标志</typeparam>
            <typeparam name="TKey">每个增量Object的标志</typeparam>
            <typeparam name="TObject">增量Object的类型</typeparam>
        </member>
        <member name="T:ZGD.Logger.FileLogger">
            <summary>
            FileLogger 将日志记录到文本文件。FileLogger是线程安全的。
            </summary>
        </member>
        <member name="T:ZGD.Helpers.TimeHelper">
            <summary>
            TimeHelper 与DateTime相关的工具类
            </summary>
        </member>
        <member name="M:ZGD.Helpers.TimeHelper.IsOnTime(System.DateTime,System.DateTime,System.Int32)">
            <summary>
            IsOnTime 时间val与requiredTime之间的差值是否在maxToleranceInSecs范围之内。
            </summary>        
        </member>
        <member name="M:ZGD.Helpers.TimeHelper.IsOnTime(System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            IsOnTime 对于循环调用，时间val与startTime之间的差值(>0)对cycleSpanInSecs求余数的结果是否在maxToleranceInSecs范围之内。
            </summary>        
        </member>
        <!-- 对于成员“T:ZGD.Persistence.SimpleXmlConverter”忽略有格式错误的 XML 注释 -->
        <member name="T:ZGD.Threading.Synchronize.SmartRWLocker">
            <summary>
            SmartRWLocker 简化了ReaderWriterLock的使用。通过using来使用Lock方法返回的对象，如：using(this.smartLocker.Lock(AccessMode.Read)){...}
            rabbit 2008.11.25
            </summary>   
        </member>
        <member name="T:ZGD.Threading.Synchronize.AccessMode">
            <summary>
            AccessMode 访问锁定资源的方式。
            </summary>
        </member>
        <member name="T:ZGD.Threading.Engines.IWorkProcesser`1">
            <summary>
            IWorkProcesser 任务处理器。
            </summary>    
        </member>
        <member name="T:ZGD.Security.ValidationCodeImageCreator">
            <summary>
            ValidationCodeImageCreator 用于生成随机的验证码图片
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Integration.ISegmentContainer`2">
            <summary>
            ISegmentContainer 用于存放片段ISegment的容器。
            </summary>
            <typeparam name="TSegmentID">片段标志的类型</typeparam>
            <typeparam name="TVal">构成片段的元素的类型</typeparam>
        </member>
        <member name="M:ZGD.ObjectManagement.Integration.ISegmentContainer`2.GetNextSegment(`0,System.Boolean)">
            <summary>
            GetNextSegment 按照fromSmallToBig指定的顺序返回下一个Segment。
            如果返回null，则表示不再有后续的Segment了。
            </summary>      
        </member>
        <member name="T:ZGD.ObjectManagement.Increasing.SingleSource">
            <summary>
            SingleSource 当增量源只有一个时，使用SingleSource作为泛型参数。
            </summary>
        </member>
        <member name="T:ZGD.Network.IBufferPool">
            <summary>
            IBufferPool 内存缓冲池。
            </summary>
        </member>
        <member name="M:ZGD.Network.IBufferPool.RentBuffer(System.Int32)">
            <summary>
            RentBuffer 从缓冲池中租借一块大小至少为minSize的缓冲区
            </summary>       
        </member>
        <member name="M:ZGD.Network.IBufferPool.GivebackBuffer(System.Int32)">
            <summary>
            GivebackBuffer 将使用完毕的缓冲区归还给缓冲池
            </summary>      
        </member>
        <member name="T:ZGD.Geometry.RotationAngles">
            <summary>
            RotationAngles 旋转的角度。
            </summary>
        </member>
        <member name="M:ZGD.Geometry.RotationAngles.GetAngleOfDirection(ZGD.Geometry.CompassDirections)">
            <summary>
            GetAngleOfDirection 获取当前方向与CompassDirections.North的夹角。
            </summary>       
        </member>
        <member name="T:ZGD.Arithmetic.Sorting.MergeSorter`1">
            <summary>
            MergeSorter 归并排序
            CQ，2008.12.13
            </summary>    
        </member>
        <member name="M:ZGD.Arithmetic.Sorting.MergeSorter`1.Merge(System.Collections.Generic.IList{`0},System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{`0},System.Boolean)">
            <summary>
            归并两个已经排序的子序列为一个有序的序列
            </summary>
            <param name="list">原始序列</param>
            <param name="startIndx">归并起始index</param>
            <param name="splitIndx">第一段结束的index</param>
            <param name="endIndx">第二段结束的index</param>
            <param name="sortedList">排序后的序列</param>
            <param name="isASC">是否升序</param>
        </member>
        <member name="T:ZGD.Emit.DynamicProxy.ExceptionFilterProxyEmitter">
            <summary>
            ExceptionFilterProxyEmitter 发射的动态代理用于转发调用并截获调用所产生的异常交给IExceptionFilter进行处理。
            直接调用原始目标的方法，而不是经过反射调用，这样效率高一些。支持ref/out参数，支持泛型方法。
            相比于SimpleAopProxyEmitter而言，ExceptionFilterProxyEmitter能记录方法参数的具体名称。
            </summary>
        </member>
        <member name="M:ZGD.Emit.DynamicProxy.ExceptionFilterProxyEmitter.DoEmitProxyType(System.Type,System.Type)">
            <summary>
            GenerateDynamicType 生成的动态类型将继承TInterface接口，并且动态类型有一个类型为originType构造参数。
            动态类型针对TInterface接口的所有实现将转发给从Ctor传入的originType实例完成。
            注意：originType 必须是public修饰的
            </summary>
            <typeparam name="TInterface">只支持非泛型接口，但接口中可以包括泛型方法</typeparam>        
        </member>
        <member name="T:ZGD.Emit.DynamicProxy.AopSimple.InterceptedMethod">
            <summary>
            InterceptedMethod 封装被截获的方法的基本信息。
            rabbit 2008.05.20
            </summary>
        </member>
        <member name="P:ZGD.Emit.DynamicProxy.AopSimple.InterceptedMethod.MethodName">
            <summary>
            MethodName 被截获的目标方法
            </summary>
        </member>
        <member name="P:ZGD.Emit.DynamicProxy.AopSimple.InterceptedMethod.Target">
            <summary>
            Target 被截获的方法需要在哪个对象上调用。
            </summary>
        </member>
        <member name="P:ZGD.Emit.DynamicProxy.AopSimple.InterceptedMethod.Arguments">
            <summary>
            Arguments 调用被截获的方法的参数
            </summary>
        </member>
        <member name="T:ZGD.Collections.CollectionConverter">
            <summary>
            CollectionConverter 用于转换集合内的元素或集合类型。
            </summary>
        </member>
        <member name="M:ZGD.Collections.CollectionConverter.ConvertAll``2(System.Collections.Generic.IEnumerable{``0},ZGD.Func{``0,``1})">
            <summary>
            ConvertAll 将source中的每个元素转换为TResult类型
            </summary>       
        </member>
        <member name="M:ZGD.Collections.CollectionConverter.ConvertSpecification``2(System.Collections.Generic.IEnumerable{``0},ZGD.Func{``0,``1},System.Predicate{``0})">
            <summary>
            ConvertSpecification 将source中的符合predicate条件元素转换为TResult类型
            </summary>       
        </member>
        <member name="M:ZGD.Collections.CollectionConverter.ConvertFirstSpecification``2(System.Collections.Generic.IEnumerable{``0},ZGD.Func{``0,``1},System.Predicate{``0})">
            <summary>
            ConvertSpecification 将source中的符合predicate条件的第一个元素转换为TResult类型
            </summary>       
        </member>
        <member name="M:ZGD.Collections.CollectionConverter.ConvertListUpper``2(System.Collections.Generic.IList{``1})">
            <summary>
            ConvertListUpper 将子类对象集合转换为基类对象集合
            </summary>        
        </member>
        <member name="M:ZGD.Collections.CollectionConverter.ConvertListDown``2(System.Collections.Generic.IList{``0})">
            <summary>
            ConvertListDown 将基类对象集合强制转换为子类对象集合
            </summary>        
        </member>
        <member name="M:ZGD.Collections.CollectionConverter.ConvertArrayToList``1(``0[])">
            <summary>
            ConverArrayToList 将数组转换为IList
            </summary>      
        </member>
        <member name="M:ZGD.Collections.CollectionConverter.ConvertListToArray``1(System.Collections.Generic.IList{``0})">
            <summary>
            ConverListToArray 将IList转换为数组
            </summary>      
        </member>
        <member name="T:ZGD.Collections.SortedArray`1">
            <summary>
            SortedArray 有序的数组，SortedArray 中的元素是不允许重复的。如果添加数组中已经存在的元素，将会被忽略。
            </summary>
        </member>
        <member name="M:ZGD.Collections.SortedArray`1.Add(`0,System.Int32@)">
            <summary>
            Add 将一个元素添加到数组中。如果数组中不存在目标元素，则返回true。如果已存在，则返回false。无论哪种情况，posIndex都会被赋予正确的值。
            </summary>        
        </member>
        <member name="M:ZGD.Collections.SortedArray`1.Remove(`0)">
            <summary>
            Remove 删除数组中所有值为t的元素。
            </summary>      
        </member>
        <member name="M:ZGD.Collections.SortedArray`1.Shrink">
            <summary>
            Shrink 将内部数组收缩到最小，释放内存。
            </summary>
        </member>
        <member name="T:ZGD.Threading.Timers.ITimingTaskExcuter">
            <summary>
            ITimingTaskExcuter 定时任务执行者。即当定时时刻到达时，将执行该接口的ExcuteOnTime方法。
            </summary>
        </member>
        <member name="M:ZGD.Threading.Timers.ITimingTaskExcuter.ExcuteOnTime(System.DateTime)">
            <summary>
            ExcuteOnTime 实现该方法时最好截获可能抛出的所有异常，如果有未截获的异常抛出，将会被忽略。
            </summary>        
        </member>
        <member name="T:ZGD.ObjectManagement.Managers.RefreshableCacheExceptionLogBridge">
            <summary>
            RefreshableCacheExceptionLogBridge 使用IAgileLogger来记录IRefreshableCacheManager刷新失败的日志。
            </summary>
        </member>
        <member name="M:ZGD.Helpers.WindowsHelper.DoWindowsEvents">
            <summary>
            DoWindowsEvents 在UI线程中调用该方法将使UI线程处理windows事件。
            </summary>
        </member>
        <member name="M:ZGD.Helpers.WindowsHelper.GetStartupDirectoryPath">
            <summary>
            GetStartupDirectoryPath 获取当前应用程序所在的目录
            </summary>        
        </member>
        <member name="M:ZGD.Helpers.WindowsHelper.CaptureScreen">
            <summary>
            CaptureScreen 截取全屏。
            </summary>  
        </member>
        <member name="M:ZGD.Helpers.WindowsHelper.CaptureScreen(System.Drawing.Rectangle)">
            <summary>
            CaptureScreen 截取目标区域region内的屏幕。
            </summary>        
        </member>
        <member name="T:ZGD.Persistence.FieldNotNullAttribute">
            <summary>
            FieldNotNullAttribute 修饰那些不允许为null的Filed，可以在运行时通过FieldChecker对这些Field进行检查。
            只对引用类型的Field有效。
            rabbit 2007.03.13
            </summary>
        </member>
        <member name="T:ZGD.Persistence.FieldChecker">
            <summary>
            FieldChecker 对FieldNotNull标签进行检查
            </summary>
        </member>
        <member name="M:ZGD.Persistence.FieldChecker.CheckFiledNotNull(System.Collections.Generic.IList{System.Object})">
            <summary>
            CheckFiledNotNull 检查targets中所有class标志[FieldNotNullAttribute]的对象的标志为[FieldNotNullAttribute]的成员的值不为null。
            </summary>       
            <returns>Key：object ；Vlaue：值为null的Filed的列表</returns>
        </member>
        <member name="T:ZGD.Network.Tcp.AgileTcpClient">
            <summary>
            AgileTcpClient 可配置的TcpClient。
            </summary>
        </member>
        <member name="P:ZGD.Network.Tcp.AgileTcpClient.Port">
            <summary>
            Port 通信采用的本地端口，其值可能在GetNetworkStream方法中被修改。
            </summary>
        </member>
        <member name="P:ZGD.Network.Tcp.AgileTcpClient.LocalIPAddress">
            <summary>
            LocalIPAddress 从哪个IP发出TCP连接。如果不设置，则选用第一块网卡的地址(此时，其值在GetNetworkStream方法中被修改)
            </summary>
        </member>
        <member name="M:ZGD.Geometry.GeometryHelper.GetAdjacentPoint(System.Drawing.Point,ZGD.Geometry.CompassDirections)">
            <summary>
            GetAdjacentPoint 获取某个方向上的相邻点
            </summary>       
        </member>
        <member name="M:ZGD.Geometry.GeometryHelper.GetDistanceSquare(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            GetDistanceSquare 获取两个点之间距离的平方。
            </summary>      
        </member>
        <member name="M:ZGD.Geometry.GeometryHelper.GetDirectionBetween(System.Drawing.Point,System.Drawing.Point,System.Int32)">
            <summary>
            GetDirectionBetween 获取从起点到终点的方向
            </summary>       
        </member>
        <member name="T:ZGD.Arithmetic.Sorting.QuickSorter`1">
            <summary>
            QuickSorter 快速排序
            CQ，2008.12.13
            </summary>
        </member>
        <member name="T:ZGD.Emit.EmitHelper">
            <summary>
            EmitHelper rabbit 2007.0725
            </summary>
        </member>
        <member name="M:ZGD.Emit.EmitHelper.GetParametersType(System.Reflection.MethodInfo)">
            <summary>
            GetParametersType 获取方法的参数类型
            </summary>       
        </member>
        <member name="M:ZGD.Emit.EmitHelper.LoadArg(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            LoadArg 加载方法的参数
            </summary>      
        </member>
        <member name="M:ZGD.Emit.EmitHelper.ConvertTopArgType(System.Reflection.Emit.ILGenerator,System.Type,System.Type)">
            <summary>
            ConvertTopArgType 发射类型转换的代码，将堆栈顶部的参数转换为目标类型。
            </summary>        
        </member>
        <member name="M:ZGD.Emit.EmitHelper.GetGenericParameterNames(System.Reflection.MethodInfo)">
            <summary>
            GetGenericParameterNames 获取目标方法的泛型参数的名称。
            </summary>        
        </member>
        <member name="M:ZGD.Emit.EmitHelper.DefineDerivedMethodSignature(System.Reflection.Emit.TypeBuilder,System.Reflection.MethodInfo)">
            <summary>
            DefineDerivedMethodSignature 定义动态类中方法的签名，支持泛型方法。
            </summary>      
        </member>
        <member name="M:ZGD.Emit.EmitHelper.Ldind(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Ldind 间接加载（即从地址加载[type类型]的对象）。不支持decimal类型
            </summary>       
        </member>
        <member name="M:ZGD.Emit.EmitHelper.Stind(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Stind 间接存储（即存储[type类型]的对象地址）。将间接存储。不支持decimal类型
            </summary>      
        </member>
        <member name="M:ZGD.Emit.EmitHelper.LoadType(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            LoadType 加载一个Type对象到堆栈。
            </summary>       
        </member>
        <member name="M:ZGD.Collections.DictionaryHelper.ConvertToDictionary``2(System.Collections.Generic.IEnumerable{``1},ZGD.Func{``1,``0},System.Predicate{``1})">
            <summary>
            ConvertToDictionary 将集合中符合条件的对象添加到新的字典中。通过func获取object对应的Key
            </summary>       
        </member>
        <member name="M:ZGD.Collections.DictionaryHelper.ConvertToDictionary``2(System.Collections.Generic.IEnumerable{``1},ZGD.Func{``1,``0})">
            <summary>
            ConvertToDictionary 将集合中符合条件的对象添加到新的字典中。通过func获取object对应的Key
            </summary>  
        </member>
        <member name="M:ZGD.Collections.DictionaryHelper.RemoveOneByValue``2(System.Collections.Generic.IDictionary{``0,``1},``1)">
            <summary>
            RemoveOneByValue 从字典中删除第一个值与val相等的记录
            </summary>      
        </member>
        <member name="M:ZGD.Collections.DictionaryHelper.GetOneByValue``2(System.Collections.Generic.IDictionary{``0,``1},``1)">
            <summary>
            GetOneByValue 从字典中找出第一个值与val相等的记录的key
            </summary>      
        </member>
        <member name="T:ZGD.Arithmetic.AStar.AStarRoutePlanner">
            <summary>
            AStarRoutePlanner A*路径规划。每个单元格Cell的位置用Point表示
            F = G + H 。
            G = 从起点A，沿着产生的路径，移动到网格上指定方格的移动耗费。
            H = 从网格上那个方格移动到终点B的预估移动耗费。使用曼哈顿方法，它计算从当前格到目的格之间水平和垂直的方格的数量总和，忽略对角线方向。
            rabbit 2008.10.18
            </summary>
        </member>
        <member name="M:ZGD.Arithmetic.AStar.AStarRoutePlanner.InitializeObstacles">
            <summary>
            InitializeObstacles 将所有位置均标记为无障碍物。
            </summary>
        </member>
        <member name="M:ZGD.Arithmetic.AStar.AStarRoutePlanner.Initialize(System.Collections.Generic.IList{System.Drawing.Point})">
            <summary>
            Initialize 在路径规划之前先设置障碍物位置。
            </summary>        
        </member>
        <member name="M:ZGD.Arithmetic.AStar.AStarRoutePlanner.GetNodeOnLocation(System.Drawing.Point,ZGD.Arithmetic.AStar.RoutePlanData)">
            <summary>
            GetNodeOnLocation 目标位置location是否已存在于开放列表或关闭列表中
            </summary>       
        </member>
        <member name="M:ZGD.Arithmetic.AStar.AStarRoutePlanner.GetMinCostNode(System.Collections.Generic.IList{ZGD.Arithmetic.AStar.AStarNode})">
            <summary>
            GetMinCostNode 从开放列表中获取代价F最小的节点，以启动下一次递归
            </summary>      
        </member>
        <member name="T:ZGD.Emit.DynamicProxy.Aop.InterceptedMethod">
            <summary>
            InterceptedMethod 封装被截获的方法的基本信息。
            rabbit 2008.05.20
            </summary>
        </member>
        <member name="M:ZGD.Emit.DynamicProxy.Aop.InterceptedMethod.Invoke">
            <summary>
            Invoke 执行目标方法
            </summary>        
        </member>
        <member name="P:ZGD.Emit.DynamicProxy.Aop.InterceptedMethod.Method">
            <summary>
            Method 被截获的目标方法
            </summary>
        </member>
        <member name="P:ZGD.Emit.DynamicProxy.Aop.InterceptedMethod.Target">
            <summary>
            Target 被截获的方法需要在哪个对象上调用。
            </summary>
        </member>
        <member name="P:ZGD.Emit.DynamicProxy.Aop.InterceptedMethod.Arguments">
            <summary>
            Arguments 调用被截获的方法的参数
            </summary>
        </member>
        <member name="T:ZGD.Addins.IAddin">
            <summary>
            IAddin 所有插件基本接口 
            作者：Rabbit 
            2008.04.12
            2008.12.08(修改)
            </summary>
        </member>
        <member name="M:ZGD.Addins.IAddin.OnLoading">
            <summary>
            OnLoading 生命周期回调，当插件加载完毕被调用。可以从AddinUtil获取主应用传递的参数来初始化插件
            </summary>
        </member>
        <member name="M:ZGD.Addins.IAddin.BeforeTerminating">
            <summary>
            BeforeTerminating 生命周期回调，卸载插件前调用
            </summary>
        </member>
        <member name="P:ZGD.Addins.IAddin.Enabled">
            <summary>
            Enabled 插件是否启用
            </summary>
        </member>
        <member name="P:ZGD.Addins.IAddin.AddinKey">
            <summary>
            AddinKey 插件关键字，不同的插件其Key是不一样的
            </summary>
        </member>
        <member name="P:ZGD.Addins.IAddin.AddinName">
            <summary>
            ServiceName 插件提供的服务的名字	
            </summary>
        </member>
        <member name="P:ZGD.Addins.IAddin.Description">
            <summary>
            Description 插件的描述信息	
            </summary>
        </member>
        <member name="P:ZGD.Addins.IAddin.Version">
            <summary>
            Version 插件版本
            </summary>
        </member>
        <member name="T:ZGD.Threading.Timers.TimingTask">
            <summary>
            TimingTask 定时任务。封装了定时任务的执行频率、执行时间、和要执行的目标方法。
            </summary>
        </member>
        <member name="P:ZGD.Threading.Timers.TimingTask.ExcuteTime">
            <summary>
            ExcuteTime 任务执行的具体时刻。如果TimingTaskType为PerHour，则将忽略ExcuteTime的Hour属性。
            </summary>
        </member>
        <member name="P:ZGD.Threading.Timers.TimingTask.DayOfWeek">
            <summary>
            DayOfWeek 该属性只有在TimingTaskType为PerWeek时才有效，表示在周几执行。
            </summary>
        </member>
        <member name="P:ZGD.Threading.Timers.TimingTask.Day">
            <summary>
            Day 该属性只有在TimingTaskType为PerMonth时才有效，表示在每月的几号执行。
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Trees.Binary.SorttedBinaryTree`1">
            <summary>
            SorttedBinaryTree ISorttedBinaryTree的默认实现。Remove方法由CQ实现。
            作者：Rabbit 
            2004.12.26
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Trees.Binary.ISorttedBinaryTree`1">
            <summary>
            IBinaryTree 二叉树接口 。
            作者：Rabbit 
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Increasing.Management.RoundCacheManager`6">
            <summary>
            RoundCacheManager 用于管理历史的RoundCache和当前增量的IRoundIncreasingCache。该类是线程安全的。
            当一个Round结束后，RoundCacheManager会将对应的RoundCache转移到历史并将其持久化。
            关于异常处理：
            (1)本模型的驱动源在于IIncreaseAutoRetriever的循环引擎，如果其抛出异常将会停止运行，同时本RoundCacheManager也就丧失了驱动力，将再无任何增量进入。
            (2)调用AddRoundCache、RemoveRoundCache方法时也要捕获异常，因为持久化可能出错。
            </summary>
            <typeparam name="TSourceToken">如果有多处数据源，则TSourceToken用于标识每个数据源</typeparam>
            <typeparam name="TRoundID">每一个Round的标志，比如用天作为Round，则TRoundID可以是int (TheDate)。（</typeparam>
            <typeparam name="TRoundCache">某一Round的完整的数据缓存。可用于序列化存储。</typeparam>
            <typeparam name="TRoundIncreasingCache">用于存储当前Round数据的增量缓存</typeparam>
            <typeparam name="TKey">每个增量的唯一标志</typeparam>
            <typeparam name="TObject">代表增量的类型</typeparam>
        </member>
        <member name="M:ZGD.ObjectManagement.Increasing.Management.RoundCacheManager`6.AddRoundCache(`2,System.Boolean)">
            <summary>
            AddRoundCache 也有可能是重新计算某个Round的历史缓存后再重新加入
            </summary>
        </member>
        <member name="M:ZGD.ObjectManagement.Increasing.Management.RoundCacheManager`6.GetHistoryRoundIDList">
            <summary>
            GetHistoryRoundIDList 获取缓存的RoundID列表，不包括当前正在增量的RoundID
            </summary>        
        </member>
        <member name="E:ZGD.ObjectManagement.Increasing.Management.RoundCacheManager`6.NewRoundStarted">
            <summary>
            NewRoundStarted 新的一个Round开始。事件参数为新Round的ID。
            </summary>
        </member>
        <member name="P:ZGD.ObjectManagement.Increasing.Management.RoundCacheManager`6.MaxHistoryCountInMemory">
            <summary>
            MaxHistoryCountInMemory 保存在内存中的最大的History个数。
            </summary>
        </member>
        <member name="T:ZGD.Helpers.WebServiceHelper">
            <summary>
            WebServiceHelper 静态类。
            </summary>
        </member>
        <member name="M:ZGD.Helpers.WebServiceHelper.InvokeWebService(System.String,System.String,System.Object[])">
            <summary>
            InvokeWebService 动态调用web服务
            </summary>
            <param name="wsUrl">WebService 地址</param>
            <param name="methodname">方法名</param>
            <param name="args">参数，仅仅支持简单类型</param>		
        </member>
        <member name="M:ZGD.Helpers.WebServiceHelper.InvokeWebService(System.String,System.String,System.String,System.Object[])">
            <summary>
            InvokeWebService 动态调用web服务
            </summary>
        </member>
        <member name="M:ZGD.Helpers.WebServiceHelper.GetWsProxyType(System.String,System.String)">
            <summary>
            GetWsProxyType 获取目标Web服务对应的代理类型
            </summary>
            <param name="wsUrl">目标Web服务的url</param>
            <param name="classname">Web服务的class名称，如果不需要指定，则传入null</param>      
        </member>
        <member name="T:ZGD.Helpers.EnumHelper">
            <summary>
            EnumHelper 的摘要说明。
            </summary>
        </member>
        <member name="M:ZGD.Helpers.EnumHelper.ConvertEnumToFieldDescriptionList(System.Type)">
            <summary>
            ConvertEnumToFieldDescriptionList 将Enum的所有枚举值放到IList中，以绑定到如ComoboBox等控件
            </summary>		
        </member>
        <member name="M:ZGD.Helpers.EnumHelper.ConvertEnumToFieldTextList(System.Type)">
            <summary>
            ConvertEnumToFieldTextList 获取Enum的所有Field的文本表示。
            </summary>       
        </member>
        <member name="M:ZGD.Helpers.EnumHelper.ParseEnumValue(System.Type,System.String)">
            <summary>
            ParseEnumValue 与ConvertEnumToList结合使用，将ComoboBox等控件中选中的string转换为枚举值
            </summary>       
        </member>
        <member name="T:ZGD.ObjectManagement.Managers.IPriorityManager`1">
            <summary>
            IPriorityManager 具有优先级的对象的管理器。
            </summary>
            <typeparam name="T">被管理的对象的类型，必须从IPriorityObject继承。</typeparam>
        </member>
        <member name="T:ZGD.ObjectManagement.Integration.ISegment`2">
            <summary>
            ISegment 片段，一个片段有有序的多个元素TVal构成。
            </summary>   
            <typeparam name="TSegmentID">片段标志的类型</typeparam>
            <typeparam name="TVal">构成片段的元素的类型</typeparam>
        </member>
        <member name="M:ZGD.ObjectManagement.Integration.ISegment`2.GetContent">
            <summary>
            GetContent 获取片段中的所有元素，从小到大排列。
            </summary>        
        </member>
        <member name="P:ZGD.ObjectManagement.Integration.ISegment`2.ID">
            <summary>
            ID 每个片段的唯一标志。
            </summary>
        </member>
        <member name="T:ZGD.ObjectManagement.Cache.HiberarchyAgileNodePicker`1">
            <summary>
            HiberarchyAgileNodePicker 为HiberarchyCache所用，通过ISmartDictionaryCache实现IAgileNodePicker接口。
            </summary>   
        </member>
        <member name="T:ZGD.ObjectManagement.TopNOrderedContainer`1">
            <summary>
            TopNOrderedContainer 用于始终保持排行榜前N名的Object。该实现是线程安全的。
            rabbit 2009.05.23
            </summary>    
            <typeparam name="TObj">被排名的对象类型</typeparam>
        </member>
        <member name="M:ZGD.ObjectManagement.TopNOrderedContainer`1.Adjust(System.Int32)">
            <summary>
            Adjust 新加入的对象初始时被放置于最后一个有效位置即posIndex，需要将其调整到正确的位置。
            </summary>        
        </member>
        <member name="T:ZGD.ObjectManagement.IOrdered`1">
            <summary>
            IOrdered 参与排行榜排序的对象必须实现的接口。
            </summary>
            <typeparam name="TOrderedObj">参与排行榜排序的对象的类型</typeparam>
        </member>
        <member name="M:ZGD.Helpers.PublicHelper.CompressBitmapToJpg(System.Drawing.Bitmap)">
            <summary>
            CompressBitmapToJpg 将位图压缩为JPG格式
            </summary>       
        </member>
        <member name="M:ZGD.Helpers.PublicHelper.CopyData(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            CopyData 拷贝二进制数据
            </summary>      
        </member>
        <member name="T:ZGD.Persistence.AgileConfiguration">
            <summary>
            AgileConfiguration 用于文件配置与object之间的映射。
            实际的配置项所在的类型只要继承AgileConfiguration，即可拥有与XML配置文件之间的自动序列化和反序列化的能力。
            rabbit 2007.02.28
            </summary>
        </member>
        <member name="M:ZGD.Persistence.AgileConfiguration.Load(System.String)">
            <summary>
            Load 将XML配置转换为Object
            </summary>        
        </member>
        <member name="M:ZGD.Persistence.AgileConfiguration.Save(System.String)">
            <summary>
            Save 将配置保存到xml文件
            </summary>   
        </member>
        <member name="T:ZGD.Network.Tcp.IConnectionCountGetter">
            <summary>
            IConnectionCountGetter 获取当前已经存在的TCP连接数
            </summary>
        </member>
        <member name="T:ZGD.IUrgentExceptionReporter">
            <summary>
            IUrgentExceptionReporter 紧急异常报告者。
            </summary>
        </member>
        <member name="T:ZGD.Demisemiquaver">
            <summary>
            Demisemiquaver 三十二进制。字符编码中不包括字符"0"/"I"/"O"/"U"
            </summary>
        </member>
        <member name="M:ZGD.Demisemiquaver.Convert(System.Int64)">
            <summary>
            Convert 将一个数转换为32进制的字符串。
            </summary>        
        </member>
    </members>
</doc>
